<?xml version="1.0" encoding="UTF-8"?><xfdf xmlns="http://ns.adobe.com/xfdf/" xml:space="preserve"><fields/><annots><underline page="9" rect="48.240,473.250,562.740,523.494" color="#E44234" flags="print" name="a846f0eb-e754-0d6a-85b5-3964f30cdcd4" title="Guest" subject="下划线" date="D:20231009165347+08'00'" creationdate="D:20231009165347+08'00'" coords="426.24,523.494,562.74,523.494,426.24,503.25,562.74,503.25,48.24,508.49399999999997,562.74,508.49399999999997,48.24,488.25,562.74,488.25,48.24,493.49399999999997,111.24000000000001,493.49399999999997,48.24,473.25,111.24000000000001,473.25"><contents>版本控制系统通常还意味着，
就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。但额外增加的工作量
却微乎其微。</contents></underline><underline page="10" rect="48.240,162.059,510.240,198.504" color="#E44234" flags="print" name="0f9ae97b-7a2e-5af2-634f-402a06924b89" title="Guest" subject="下划线" date="D:20231009165525+08'00'" creationdate="D:20231009165525+08'00'" coords="184.74,198.50430000000006,510.24,198.50430000000006,184.74,177.8278927734375,510.24,177.8278927734375,48.24,183.50430000000006,357.2970000000001,183.50430000000006,48.24,162.05936250000002,357.2970000000001,162.05936250000002"><contents>如何让在不同系统上的开发者协同工作？于是，集中化的版本控制系统
（Centralized Version Control Systems，简称 CVCS）应运而生。</contents></underline><text page="10" rect="48.240,167.504,79.240,198.504" color="#FFFF00" flags="print,nozoom,norotate" inreplyto="0f9ae97b-7a2e-5af2-634f-402a06924b89" name="24b53a6e-5925-20c0-e76d-360423cbea13" title="Guest" subject="注释" date="D:20231009165556+08'00'" creationdate="D:20231009165556+08'00'" icon="Comment" statemodel="Review"><trn-custom-data bytes="{&quot;trn-mention&quot;:&quot;{\&quot;contents\&quot;:\&quot;集中化版本控制:可以在不同系统上协同工作\&quot;,\&quot;ids\&quot;:[]}&quot;}"/><contents>集中化版本控制:可以在不同系统上协同工作</contents></text><underline page="11" rect="48.240,245.781,562.740,311.458" color="#E44234" flags="print" name="5e9a5836-a781-0c56-6b0a-85e3f6cdbfd7" title="Guest" subject="下划线" date="D:20231009165951+08'00'" creationdate="D:20231009165951+08'00'" coords="142.74,311.45759999999996,552.24,311.45759999999996,142.74,290.78119277343745,552.24,290.78119277343745,48.24,296.45759999999996,562.74,296.45759999999996,48.24,275.7811927734374,562.74,275.7811927734374,48.24,281.45759999999996,560.514,281.45759999999996,48.24,260.01266250000003,560.514,260.01266250000003,48.24,266.45759999999996,520.74,266.45759999999996,48.24,245.7811927734375,520.74,245.7811927734375"><contents>。这么做最显而易见的缺点是中央服务器的单点故障。如果宕机一小时，那么在这一小时
内，谁都无法提交更新，也就无法协同工作。如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑
问你将丢失所有数据——包括项目的整个变更历史，只剩下人们在各自机器上保留的单独快照。本地版本控制系
统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。</contents></underline><text page="11" rect="48.240,280.458,79.240,311.458" color="#FFFF00" flags="print,nozoom,norotate" inreplyto="5e9a5836-a781-0c56-6b0a-85e3f6cdbfd7" name="4f078f8c-31c3-7224-fb27-7d59c6b7fb1c" title="Guest" subject="注释" date="D:20231009170007+08'00'" creationdate="D:20231009170007+08'00'" icon="Comment" statemodel="Review"><trn-custom-data bytes="{&quot;trn-mention&quot;:&quot;{\&quot;contents\&quot;:\&quot;集中式版本控制的风险\&quot;,\&quot;ids\&quot;:[]}&quot;}"/><contents>集中式版本控制的风险</contents></text><underline page="11" rect="48.240,155.181,554.067,205.858" color="#E44234" flags="print" name="812b31a6-53b9-6d98-30fd-a03ffa9f3faf" title="Guest" subject="下划线" date="D:20231009170309+08'00'" creationdate="D:20231009170309+08'00'" coords="530.3475000000001,205.85760000000005,540.8475000000001,205.85760000000005,530.3475000000001,184.4126625,540.8475000000001,184.4126625,48.24,190.85760000000005,554.067,190.85760000000005,48.24,169.4126625,554.067,169.4126625,48.24,175.85760000000005,552.24,175.85760000000005,48.24,155.1811927734375,552.24,155.1811927734375"><contents>像
Git、Mercurial、Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像
下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。</contents></underline><underline page="12" rect="48.240,94.068,562.740,159.744" color="#E44234" flags="print" name="3cdf9b50-533a-6fe0-a24f-194e42d3a0bf" title="Guest" subject="下划线" date="D:20231009170735+08'00'" creationdate="D:20231009170735+08'00'" coords="92.55000000000001,159.74400000000003,168.96900000000002,159.74400000000003,92.55000000000001,138.135,168.96900000000002,138.135,48.24,129.74400000000003,562.74,129.74400000000003,48.24,109.06759277343747,562.74,109.06759277343747,48.24,114.74400000000003,499.74,114.74400000000003,48.24,94.06759277343747,499.74,94.06759277343747"><contents>分布式版本控制.
更进一步，许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分
别和不同工作小组的人相互协作。你可以根据需要设定不同的协作流程，比如层次模型式的工作流</contents></underline><underline page="13" rect="48.240,207.018,563.107,257.694" color="#E44234" flags="print" name="8c59edbe-4ba5-f551-3447-f67776a40b18" title="Guest" subject="下划线" date="D:20231009170855+08'00'" creationdate="D:20231009170855+08'00'" coords="489.60749999999996,257.69399999999996,563.1075,257.69399999999996,489.60749999999996,236.24906250000004,563.1075,236.24906250000004,48.24,242.69399999999996,555.6000000000003,242.69399999999996,48.24,221.24906250000004,555.6000000000003,221.24906250000004,48.24,227.69399999999996,384.24,227.69399999999996,48.24,207.0175927734375,384.24,207.0175927734375"><contents>概念上来区分，
其它大部分系统以文件变更列表的方式存储信息。这类系统（CVS、Subversion、Perforce、Bazaar 等等）将
它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。</contents></underline><underline page="13" rect="48.240,263.268,217.240,288.538" color="#E44234" flags="print" name="5e5a546e-3544-0248-97ef-9cf40007616e" title="Guest" subject="下划线" date="D:20231009170858+08'00'" creationdate="D:20231009170858+08'00'" coords="48.24,288.538,217.24,288.538,48.24,263.26837402343745,217.24,263.26837402343745"><contents>直接记录快照，而非差异比较</contents></underline><underline page="14" rect="48.240,112.643,497.524,164.932" color="#E44234" flags="print" name="3b3a9a44-067c-b0cb-726b-3c4c36e574dc" title="Guest" subject="下划线" date="D:20231009171015+08'00'" creationdate="D:20231009171015+08'00'" coords="48.24,164.93200000000002,204.24,164.93200000000002,48.24,139.66237402343745,204.24,139.66237402343745,48.24,134.08799999999997,497.5245,134.08799999999997,48.24,112.64306250000004,497.5245,112.64306250000004"><contents>近乎所有操作都是本地执行
在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息</contents></underline><underline page="15" rect="48.240,548.535,555.957,615.988" color="#E44234" flags="print" name="4ddaf149-9f94-eb63-7469-5560300a7a87" title="Guest" subject="下划线" date="D:20231009171030+08'00'" creationdate="D:20231009171030+08'00'" coords="48.24,615.9879999999999,134.924,615.9879999999999,48.24,590.7183740234375,134.924,590.7183740234375,48.24,585.144,555.957,585.144,48.24,563.535,555.957,563.535,48.24,570.144,111.24000000000001,570.144,48.24,548.535,111.24000000000001,548.535"><contents>Git 保证完整性
Git 中所有数据在存储前都计算校验和，然后以校验和来引用。这意味着不可能在 Git 不知情时更改任何文件内
容或目录内容</contents></underline><underline page="15" rect="48.240,316.646,556.093,384.099" color="#E44234" flags="print" name="5912a95e-786a-8893-50fe-51d5f64da6ca" title="Guest" subject="下划线" date="D:20231009171045+08'00'" creationdate="D:20231009171045+08'00'" coords="48.24,384.099,160.924,384.099,48.24,358.8293740234375,160.924,358.8293740234375,48.24,353.25499999999994,556.0935,353.25499999999994,48.24,331.64599999999996,556.0935,331.64599999999996,48.24,338.25499999999994,90.24000000000001,338.25499999999994,48.24,316.64599999999996,90.24000000000001,316.64599999999996"><contents>Git 一般只添加数据
你执行的 Git 操作，几乎只往 Git 数据库中增加数据。很难让 Git 执行任何不可逆操作，或者让它以任何方式清
除数据。</contents></underline></annots><pages><defmtx matrix="1,0,0,-1,0,792"/></pages></xfdf>