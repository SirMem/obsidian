<?xml version="1.0" encoding="UTF-8"?><xfdf xmlns="http://ns.adobe.com/xfdf/" xml:space="preserve"><fields/><annots><underline page="22" rect="80.829,108.707,541.131,174.277" color="#E44234" flags="print" name="8bf45fb3-cb06-7b38-2c0e-f73accd50a89" title="Guest" subject="下划线" date="D:20231219151225+08'00'" creationdate="D:20231219151225+08'00'" coords="80.82900000000001,174.27734339999995,540.4532956,174.27734339999995,80.82900000000001,153.53863484374995,540.4532956,153.53863484374995,80.82900000000001,159.33334339999988,498.5506000000003,159.33334339999988,80.82900000000001,138.59463484374987,498.5506000000003,138.59463484374987,80.82900000000001,144.38934339999992,541.1307524000006,144.38934339999992,80.82900000000001,123.65063484374991,541.1307524000006,123.65063484374991,95.773,129.44534339999996,170.49250000000004,129.44534339999996,95.773,108.70663484374995,170.49250000000004,108.70663484374995"><contents>‧“时间和空间资源”分别对应「时间复杂度 time complexity」和「空间复杂度 space complexity」。
‧“随着输入数据大小的增加”意味着复杂度反映了算法运行效率与输入数据体量之间的关系。
‧“时间和空间的增长趋势”表示复杂度分析关注的不是运行时间或占用空间的具体值，而是时间或空间
增长的“快慢”。</contents></underline><underline page="29" rect="80.829,687.842,484.314,723.524" color="#E44234" flags="print" name="b26f57ce-9e48-dc17-e269-3ea6d8360255" title="Guest" subject="下划线" date="D:20231219153809+08'00'" creationdate="D:20231219153809+08'00'" coords="95.773,723.5243434,484.3140000000003,723.5243434,95.773,702.78563484375,484.3140000000003,702.78563484375,80.82900000000001,708.5803434000001,429.52030000000025,708.5803434000001,80.82900000000001,687.84163484375,429.52030000000025,687.84163484375"><contents>普通递归：求和操作是在“归”的过程中执行的，每层返回后都要再执行一次求和操作。
‧ 尾递归：求和操作是在“递”的过程中执行的，“归”的过程只需层层返回。</contents></underline><underline page="29" rect="87.332,344.641,115.624,362.805" color="#E44234" flags="print" name="9872acde-f258-509d-b7b7-02d205360822" title="Guest" subject="下划线" date="D:20231219154213+08'00'" creationdate="D:20231219154213+08'00'" coords="87.3318276,362.8046636,115.6236276,362.8046636,87.3318276,344.64132800000004,115.6236276,344.64132800000004"><contents>递归树</contents></underline><square page="26" rect="60.100,54.730,293.410,188.280" color="#E44234" flags="print" name="0d79d3c7-50ed-1c3b-acdb-1649ad28de86" title="Guest" subject="矩形" date="D:20231219154233+08'00'" creationdate="D:20231219154232+08'00'"/><underline page="44" rect="80.829,247.412,541.141,298.038" color="#E44234" flags="print" name="1513ff86-7ba7-9408-c810-7e0c12b5bc95" title="Guest" subject="下划线" date="D:20231219154644+08'00'" creationdate="D:20231219154644+08'00'" coords="95.773,298.03834340000003,384.6880000000002,298.03834340000003,95.773,277.29963484375,384.6880000000002,277.29963484375,80.82900000000001,283.09434340000007,541.1406704000003,283.09434340000007,80.82900000000001,262.35563484375007,541.1406704000003,262.35563484375007,95.773,268.1503434000001,225.28680000000008,268.1503434000001,95.773,247.4116348437501,225.28680000000008,247.4116348437501"><contents>暂存数据：用于保存算法运行过程中的各种常量、变量、对象等。
‧ 栈帧空间：用于保存调用函数的上下文数据。系统在每次调用函数时都会在栈顶部创建一个栈帧，函数
返回后，栈帧空间会被释放。</contents></underline><underline page="46" rect="70.866,470.901,541.124,546.056" color="#E44234" flags="print" name="63b02e9f-8fed-3554-a145-a8611edfa2d2" title="Guest" subject="下划线" date="D:20231219154856+08'00'" creationdate="D:20231219154856+08'00'" coords="70.866,544.6953434,339.8570000000001,544.6953434,70.866,523.95663484375,339.8570000000001,523.95663484375,80.82900000000001,546.0557160000001,541.1243902,546.0557160000001,80.82900000000001,500.788725,541.1243902,500.788725,95.77300000000002,531.111716,204.92360000000002,531.111716,95.77300000000002,485.84472500000004,204.92360000000002,485.84472500000004,80.82900000000001,516.167716,526.7366,516.167716,80.82900000000001,470.900725,526.7366,470.900725"><contents>在递归函数中，需要注意统计栈帧空间。例如在以下代码中：
‧ 函数 loop() 在循环中调用了 𝑛 次 function() ，每轮中的 function() 都返回并释放了栈帧空间，因此
空间复杂度仍为 𝑂(1) 。
‧ 递归函数 recur() 在运行过程中会同时存在 𝑛 个未返回的 recur() ，从而占用 𝑂(𝑛) 的栈帧空间。</contents></underline><square page="46" rect="51.850,244.840,544.800,458.910" color="#E44234" flags="print" name="f749be22-3331-9003-7936-88245b8cde10" title="Guest" subject="矩形" date="D:20231219154901+08'00'" creationdate="D:20231219154859+08'00'"/><underline page="55" rect="160.529,668.645,358.247,689.383" color="#E44234" flags="print" name="4b0e6ac0-706a-6a7b-88cb-44d67b49409d" title="Guest" subject="下划线" date="D:20231219155141+08'00'" creationdate="D:20231219155141+08'00'" coords="160.52940000000004,689.3833434000001,358.24715960000026,689.3833434000001,160.52940000000004,668.64463484375,358.24715960000026,668.64463484375"><contents>数组、链表、栈、队列、哈希表、树、堆、图</contents></underline><underline page="57" rect="70.866,656.958,541.126,692.640" color="#E44234" flags="print" name="d5c07b10-afe7-5f3c-3d2a-d9a0e81a27e9" title="Guest" subject="下划线" date="D:20231219212711+08'00'" creationdate="D:20231219212711+08'00'" coords="70.86600000000001,692.6403434,541.1260941999998,692.6403434,70.86600000000001,671.90163484375,541.1260941999998,671.90163484375,70.86600000000004,677.6963434,379.70660000000026,677.6963434,70.86600000000004,656.95763484375,379.70660000000026,656.95763484375"><contents>值得说明的是，所有数据结构都是基于数组、链表或二者的组合实现的。例如，栈和队列既可以使用数组实
现，也可以使用链表实现；而哈希表的实现可能同时包含数组和链表。</contents></underline><square page="74" rect="52.280,195.660,592.390,432.920" color="#E44234" flags="print" name="cb57584f-4155-5297-9916-8ae7cffce279" title="Guest" subject="矩形" date="D:20231220093010+08'00'" creationdate="D:20231220093008+08'00'"/><square page="79" rect="148.470,500,489.300,730.840" color="#E44234" flags="print" name="5d311070-b2e3-c1de-eb5e-516cbd6b89ad" title="Guest" subject="矩形" date="D:20231220093910+08'00'" creationdate="D:20231220093908+08'00'"/><square page="80" rect="52.780,51.630,567.240,446.230" color="#E44234" flags="print" name="edbc816b-8907-0f86-13e1-18cbfd6eb2bd" title="Guest" subject="矩形" date="D:20231220094208+08'00'" creationdate="D:20231220094205+08'00'"/><square page="88" rect="52.780,340.180,580.550,551.290" color="#E44234" flags="print" name="a0b926f9-485b-027a-61aa-9b1fd1ee27f2" title="Guest" subject="矩形" date="D:20231220100728+08'00'" creationdate="D:20231220100728+08'00'"/><square page="96" rect="55.790,476.990,586.590,593.570" color="#E44234" flags="print" name="b1b77015-15b8-3ee9-3eac-9506a6224fb9" title="Guest" subject="矩形" date="D:20231220194526+08'00'" creationdate="D:20231220194525+08'00'"/><underline page="97" rect="70.866,411.258,146.201,420.103" color="#E44234" flags="print" name="76fab838-9145-81c3-7122-0932ae99fe42" title="Guest" subject="下划线" date="D:20231220194736+08'00'" creationdate="D:20231220194736+08'00'" coords="70.866,420.103207,146.20145,420.103207,70.866,411.25798519653324,146.20145,411.25798519653324"><contents>queue&lt;int&gt; queue;</contents></underline><underline page="102" rect="245.212,61.386,275.100,82.015" color="#E44234" flags="print" name="aebe21c8-4641-839c-5c5a-c3be38fee688" title="Guest" subject="下划线" date="D:20231220200139+08'00'" creationdate="D:20231220200139+08'00'" coords="245.2120000000001,82.0153434,275.09980000000013,82.0153434,245.2120000000001,61.385600781250105,275.09980000000013,61.385600781250105"><contents>高并发</contents></underline><square page="102" rect="50.110,28.690,587.930,131.250" color="#E44234" flags="print" name="3df7e40b-7ed2-9d60-81ad-960364a40fa7" title="Guest" subject="矩形" date="D:20231220200212+08'00'" creationdate="D:20231220200211+08'00'"/><square page="112" rect="50.780,548.480,575.900,674.080" color="#E44234" flags="print" name="9cec720a-e99c-ab25-752b-6eff90713dcb" title="Guest" subject="矩形" date="D:20231220200642+08'00'" creationdate="D:20231220200640+08'00'"/><underline page="117" rect="70.866,659.570,541.127,695.143" color="#E44234" flags="print" name="f1e7d148-0bbe-b0e9-dbf2-59655b0014ec" title="Guest" subject="下划线" date="D:20231220201440+08'00'" creationdate="D:20231220201440+08'00'" coords="316.401,695.1433434,541.1273682000003,695.1433434,316.401,674.51360078125,541.1273682000003,674.51360078125,70.86600000000001,680.1993434,516.5236,680.1993434,70.86600000000001,659.56960078125,516.5236,659.56960078125"><contents>。在哈希表中，我们将数组中的每个空位称为「桶
bucket」，每个桶可存储一个键值对。因此，查询操作就是找到 key 对应的桶，并在桶中获取 value 。</contents></underline><square page="115" rect="63.540,380.520,546.120,652.070" color="#E44234" flags="print" name="1c9119c8-9692-1f4f-832e-b5102456ec4d" title="Guest" subject="矩形" date="D:20231220204050+08'00'" creationdate="D:20231220204035+08'00'"/><square page="96" rect="96.060,114.270,542.330,343.460" color="#E44234" flags="print" name="2f6379f0-4339-f0cd-8622-c1fbd658484b" title="Guest" subject="矩形" date="D:20231220204310+08'00'" creationdate="D:20231220204306+08'00'"/><square page="97" rect="167.160,510.620,448.540,627.110" color="#E44234" flags="print" name="74a6f164-27dd-3a90-d9e1-9c157429695c" title="Guest" subject="矩形" date="D:20231220204332+08'00'" creationdate="D:20231220204331+08'00'"/></annots><pages><defmtx matrix="1,0,0,-1,0,792"/></pages></xfdf>