<?xml version="1.0" encoding="UTF-8"?><xfdf xmlns="http://ns.adobe.com/xfdf/" xml:space="preserve"><fields/><annots><square page="114" rect="47.020,352.730,547.150,515.170" color="#00CC63" flags="print" name="5969d3c0-00d6-9f42-0399-2dfa30328503" title="Guest" subject="矩形" date="D:20231007104649+08'00'" creationdate="D:20231007104647+08'00'"/><underline page="139" rect="149.806,464.756,445.311,488.257" color="#E44234" flags="print" name="aef8807b-fd06-324d-82fc-3bb5aeb38305" title="Guest" subject="下划线" date="D:20231007104724+08'00'" creationdate="D:20231007104722+08'00'" coords="149.80559399999947,488.2572195519999,445.3111973840005,488.2572195519999,149.80559399999947,464.75553258099995,445.3111973840005,464.75553258099995"><contents>3.4.5 可移植类型：stdint.h和inttypes.h</contents></underline><underline page="139" rect="50,219.551,526.515,335.707" color="#E44234" flags="print" name="e69969e8-01f0-1d54-94d6-faabcb972855" title="Guest" subject="下划线" date="D:20231007104814+08'00'" creationdate="D:20231007104814+08'00'" coords="95.02507999999943,335.70653919999984,526.5154299999995,335.70653919999984,95.02507999999943,315.5101869399999,526.5154299999995,315.5101869399999,50,311.7168111999998,526.5154299999995,311.7168111999998,50,291.5204589399999,526.5154299999995,291.5204589399999,50,287.7270831999998,517.5104140000003,287.7270831999998,50,267.5307309399999,517.5104140000003,267.5307309399999,50,263.7373551999998,524.2641760000006,263.7373551999998,50,243.54100293999988,524.2641760000006,243.54100293999988,50,239.74762719999978,270.6228919999994,239.74762719999978,50,219.55127493999987,270.6228919999994,219.55127493999987"><contents>。例如，int32_t表示32位的有符号整数类型。在使用32位int的系统
中，头文件会把int32_t作为int的别名。不同的系统也可以定义相同的类型
名。例如，int为16位、long为32位的系统会把int32_t作为long的别名。然
后，使用int32_t类型编写程序，并包含stdint.h头文件时，编译器会把int或
long替换成与当前系统匹配的类型</contents></underline><underline page="139" rect="185.075,93.605,305.142,113.802" color="#E44234" flags="print" name="63a17039-b3d2-e96a-75ed-d61511cf202b" title="Guest" subject="下划线" date="D:20231007104935+08'00'" creationdate="D:20231007104935+08'00'" coords="185.07524000000012,113.80155519999983,305.14212000000043,113.80155519999983,185.07524000000012,93.6052029399998,305.14212000000043,93.6052029399998"><contents>精确宽度整数类型</contents></underline><underline page="140" rect="50,723.336,516.760,767.522" color="#E44234" flags="print" name="4b5d18fa-e84f-7af4-b04f-8d55ca6df9d8" title="Guest" subject="下划线" date="D:20231007104959+08'00'" creationdate="D:20231007104959+08'00'" coords="50,767.5216432,516.7599959999989,767.5216432,50,747.3252909400001,516.7599959999989,747.3252909400001,50,743.5319152,80.01671999999962,743.5319152,50,723.33556294,80.01671999999962,723.33556294"><contents>int_least8_t是可容纳8位有符号整数值的类型中宽度最小的类型的一个别
名。</contents></underline><underline page="140" rect="50,566.833,545.261,608.590" color="#E44234" flags="print" name="3482fca0-b3bb-0c06-bfef-80114f803c1d" title="Guest" subject="下划线" date="D:20231007105047+08'00'" creationdate="D:20231007105047+08'00'" coords="250.34659763999844,608.5896952,545.2608716399991,608.5896952,250.34659763999844,588.3933429399999,545.2608716399991,588.3933429399999,50,581.8861292199999,290.1337599999988,581.8861292199999,50,566.8325749,290.1337599999988,566.8325749"><contents>例如，int_fast8_t被定义为系统中对8位有符号
值而言运算最快的整数类型的别名。</contents></underline><underline page="140" rect="50,477.441,540.023,545.617" color="#E44234" flags="print" name="141c7dc7-84de-6a45-a9f0-f4767015d060" title="Guest" subject="下划线" date="D:20231007105118+08'00'" creationdate="D:20231007105118+08'00'" coords="380.1839199999995,545.6166592,540.022954,545.6166592,380.1839199999995,525.4203069399999,540.022954,525.4203069399999,50,521.6269312,505.503725999999,521.6269312,50,501.43057894,505.503725999999,501.43057894,50,497.63720319999993,302.1404479999983,497.63720319999993,50,477.44085093999996,302.1404479999983,477.44085093999996"><contents>为此，C99定义了最大的
有符号整数类型intmax_t，可储存任何有效的有符号整数值。类似地，
unitmax_t表示最大的无符号整数类型。</contents></underline><underline page="140" rect="50,342.499,545.276,386.685" color="#E44234" flags="print" name="97565b5a-2953-e69f-a165-6e415894ff39" title="Guest" subject="下划线" date="D:20231007105314+08'00'" creationdate="D:20231007105314+08'00'" coords="530.2675199999994,386.68471119999987,545.2758799999992,386.68471119999987,530.2675199999994,366.4883589399999,545.2758799999992,366.4883589399999,50,362.69498319999985,422.9577459999982,362.69498319999985,50,342.4986309399999,422.9577459999982,342.4986309399999"><contents>例
如，printf()打印特定类型时要求与相应的转换说明匹配。</contents></underline><text page="140" rect="50,355.685,81,386.685" color="#FFFF00" flags="print,nozoom,norotate" inreplyto="97565b5a-2953-e69f-a165-6e415894ff39" name="11db6aa8-3142-25ba-18b6-af2811ac8a12" title="Guest" subject="注释" date="D:20231007105326+08'00'" creationdate="D:20231007105326+08'00'" icon="Comment" statemodel="Review"><trn-custom-data bytes="{&quot;trn-mention&quot;:&quot;{\&quot;contents\&quot;:\&quot;转义符号\&quot;,\&quot;ids\&quot;:[]}&quot;}"/><contents>转义符号</contents></text><underline page="140" rect="50,246.540,545.276,290.726" color="#E44234" flags="print" name="6e4ba874-2960-1747-2b6a-6a308701a673" title="Guest" subject="下划线" date="D:20231007105555+08'00'" creationdate="D:20231007105555+08'00'" coords="83.76880999999958,290.72579919999987,545.2758799999992,290.72579919999987,83.76880999999958,270.52944693999984,545.2758799999992,270.52944693999984,50,266.73607119999986,197.0819279999996,266.73607119999986,50,246.53971893999983,197.0819279999996,246.53971893999983"><contents>inttypes.h头文件中定义了PRId32字符串宏，代表打印32位有符号值的合
适转换说明（如d或l）</contents></underline><underline page="157" rect="50,695.597,545.276,739.784" color="#E44234" flags="print" name="5435b28b-280d-2dc1-53c0-1860508f2476" title="Guest" subject="下划线" date="D:20231007145522+08'00'" creationdate="D:20231007145522+08'00'" coords="515.2591600000001,739.7835202,545.27588,739.7835202,515.2591600000001,719.58716794,545.27588,719.58716794,50,715.7937922,215.09196,715.7937922,50,695.59743994,215.09196,695.59743994"><contents>传递
给函数的信息被称为参数</contents></underline><square page="134" rect="41.040,520.010,556.550,805.560" color="#00CC63" flags="print" name="b9526d8f-4ef3-f558-975e-0c457ccde9d9" title="Guest" subject="矩形" date="D:20231007152342+08'00'" creationdate="D:20231007152340+08'00'"/><underline page="134" rect="80.017,61.369,439.467,81.565" color="#E44234" flags="print" name="5c0965f8-2bf0-f6b6-59ad-1aac765d4788" title="Guest" subject="下划线" date="D:20231007152426+08'00'" creationdate="D:20231007152426+08'00'" coords="80.01671999999962,81.56535819999976,439.4669419999991,81.56535819999976,80.01671999999962,61.36900593999974,439.4669419999991,61.36900593999974"><contents>接下来的3个转义序列（\\、\'、\"）用于打印\、'、"字符</contents></underline><underline page="180" rect="50,305.764,545.021,349.950" color="#E44234" flags="print" name="21bf4a88-312c-b596-0400-52bd0b517f9d" title="Guest" subject="下划线" date="D:20231007152732+08'00'" creationdate="D:20231007152732+08'00'" coords="175.695015,349.9504401999999,545.0207378800001,349.9504401999999,175.695015,329.75408793999986,545.0207378800001,329.75408793999986,50,325.9607121999999,245.10868000000005,325.9607121999999,50,305.76435993999985,245.10868000000005,305.76435993999985"><contents>sizeof 运算符，它以字节为单位给出对象的大小。strlen()
函数给出字符串中的字符长度</contents></underline><underline page="180" rect="50,621.379,543.775,725.824" color="#E44234" flags="print" name="13f3de48-9464-d15a-db96-55df329b7b93" title="Guest" subject="下划线" date="D:20231007152818+08'00'" creationdate="D:20231007152818+08'00'" coords="80.01672000000008,725.82449722,173.81897000000004,725.82449722,80.01672000000008,710.7709429,173.81897000000004,710.7709429,80.01672000000008,689.5550272,484.49202200000013,689.5550272,80.01672000000008,669.35867494,484.49202200000013,669.35867494,50,665.5652992,543.7750440000002,665.5652992,50,645.36894694,543.7750440000002,645.36894694,50,641.5755712,272.8741460000001,641.5755712,50,621.37921894,272.8741460000001,621.37921894"><contents>字符串和字符
字符串常量"x"和字符常量'x'不同。区别之一在于'x'是基本类型
（char），而"x"是派生类型（char数组）；区别之二是"x"实际上由两个字符
组成：'x'和空字符\0（见图4.3）。</contents></underline><square page="180" rect="57.890,404.820,573.960,610.700" color="#00CC63" flags="print" name="3bb99cc5-8b28-1fb3-e373-551bc5d60ab1" title="Guest" subject="矩形" date="D:20231007152824+08'00'" creationdate="D:20231007152822+08'00'"/><square page="194" rect="32.220,437.770,580.520,804.750" color="#00CC63" flags="print" name="8266bc0f-3b72-a5a0-1b6d-ead5855c6139" title="Guest" subject="矩形" date="D:20231007152921+08'00'" creationdate="D:20231007152919+08'00'"/><underline page="228" rect="50,674.037,545.276,715.794" color="#E44234" flags="print" name="8cc642b8-62a8-3343-1511-59123bf2f438" title="Guest" subject="下划线" date="D:20231007152955+08'00'" creationdate="D:20231007152955+08'00'" coords="530.26752,715.7937922,545.27588,715.7937922,530.26752,695.59743994,545.27588,695.59743994,50,689.09022622,425.209,689.09022622,50,674.0366719,425.209,674.0366719"><contents>以
把字符串储存在字符数组（由内存中相邻的字节组成）中</contents></underline><text page="228" rect="50,684.794,81,715.794" color="#FFFF00" flags="print,nozoom,norotate" inreplyto="8cc642b8-62a8-3343-1511-59123bf2f438" name="973e9fc1-80c6-8aff-70bb-72354573c397" title="Guest" subject="注释" date="D:20231007153007+08'00'" creationdate="D:20231007153007+08'00'" icon="Comment" statemodel="Review"><trn-custom-data bytes="{&quot;trn-mention&quot;:&quot;{\&quot;contents\&quot;:\&quot;char[]\&quot;,\&quot;ids\&quot;:[]}&quot;}"/><contents>char[]</contents></text><underline page="230" rect="50,506.678,545.186,550.864" color="#E44234" flags="print" name="85d64d55-d4f9-86ff-b00b-e1e3cfe5faf6" title="Guest" subject="下划线" date="D:20231007153040+08'00'" creationdate="D:20231007153040+08'00'" coords="395.19228,550.8644122,545.18582984,550.8644122,395.19228,530.6680599399999,545.18582984,530.6680599399999,50,526.8746841999999,104.030096,526.8746841999999,50,506.67833193999996,104.030096,506.67833193999996"><contents>"This is an example of a
string"。</contents></underline><text page="230" rect="50,519.864,81,550.864" color="#FFFF00" flags="print,nozoom,norotate" inreplyto="85d64d55-d4f9-86ff-b00b-e1e3cfe5faf6" name="c5610b84-c3c8-7a51-2c25-dceed873add1" title="Guest" subject="注释" date="D:20231007153049+08'00'" creationdate="D:20231007153049+08'00'" icon="Comment" statemodel="Review"><trn-custom-data bytes="{&quot;trn-mention&quot;:&quot;{\&quot;contents\&quot;:\&quot;空格也算一个字符\&quot;,\&quot;ids\&quot;:[]}&quot;}"/><contents>空格也算一个字符</contents></text><square page="199" rect="50.790,253.730,541.200,793.290" color="#00CC63" flags="print" name="801d0055-2639-cdfb-94b8-6dcd73dbd400" title="Guest" subject="矩形" date="D:20231007153148+08'00'" creationdate="D:20231007153142+08'00'"/><underline page="199" rect="115.286,224.229,209.089,239.283" color="#E44234" flags="print" name="b3943a19-9ed1-d428-cfab-4841343f7ef2" title="Guest" subject="下划线" date="D:20231007153252+08'00'" creationdate="D:20231007153252+08'00'" coords="115.28636600000027,239.28282621999983,209.088616,239.28282621999983,115.28636600000027,224.22927189999984,209.088616,224.22927189999984"><contents>类型可移植性</contents></underline><square page="200" rect="43.140,195.290,563.040,444.870" color="#00CC63" flags="print" name="dc76d06d-18e4-285a-7d16-8075d05e7bc6" title="Guest" subject="矩形" date="D:20231007153331+08'00'" creationdate="D:20231007153307+08'00'"><trn-custom-data bytes="{&quot;trn-mention&quot;:&quot;{\&quot;contents\&quot;:\&quot;float浮点小数的转换\&quot;,\&quot;ids\&quot;:[]}&quot;}"/><contents>float浮点小数的转换</contents></square><underline page="200" rect="80.017,163.325,263.869,183.762" color="#E44234" flags="print" name="169e923d-6371-03af-8678-35f47edcdb51" title="Guest" subject="下划线" date="D:20231007153352+08'00'" creationdate="D:20231007153352+08'00'" coords="80.01672000000008,183.76159947999986,263.86913000000004,183.76159947999986,80.01672000000008,163.3253499399999,263.86913000000004,163.3253499399999"><contents>1.使用修饰符和标记的示例</contents></underline><underline page="262" rect="50,630.375,545.276,674.561" color="#E44234" flags="print" name="a987da6f-1d5f-9e3d-1447-10f91f855394" title="Guest" subject="下划线" date="D:20231007193427+08'00'" creationdate="D:20231007193427+08'00'" coords="80.01671999999996,674.5614472,545.27588,674.5614472,80.01671999999996,654.3650949400001,545.27588,654.3650949400001,50,650.5717192,170.06687999999997,650.5717192,50,630.37536694,170.06687999999997,630.37536694"><contents>C 语言规定，sizeof 返回 size_t 类型的值。这是一个无符号整数类型，
但它不是新类型。</contents></underline><underline page="286" rect="50,140.835,503.252,185.021" color="#E44234" flags="print" name="a58eff18-1452-9d7c-af6c-9cfb86a42616" title="Guest" subject="下划线" date="D:20231007193612+08'00'" creationdate="D:20231007193612+08'00'" coords="91.27299,185.02106019999985,503.252472,185.02106019999985,91.27299,164.82470793999983,503.252472,164.82470793999983,50,161.03133219999984,105.530932,161.03133219999984,50,140.8349799399998,105.530932,140.8349799399998"><contents>当作为函数参数传递时，char和short被转换成int，float被转换成
double。</contents></underline><underline page="644" rect="50,543.413,545.276,587.599" color="#E44234" flags="print" name="b75da09e-84b5-d084-f64a-10d6321ed900" title="Guest" subject="下划线" date="D:20231009085849+08'00'" creationdate="D:20231009085849+08'00'" coords="80.01672000000008,587.5986832,545.2758800000001,587.5986832,80.01672000000008,567.40233094,545.2758800000001,567.40233094,50,563.6089552,125.0418000000002,563.6089552,50,543.4126029399999,125.0418000000002,543.4126029399999"><contents>注意该例使用了符号常量 MONTHS 表示数组大小，这是我们推荐且常
用的做法。</contents></underline><underline page="644" rect="115.286,480.440,242.107,500.876" color="#E44234" flags="print" name="bc82a5b6-1d66-e7b6-314d-d97a3c683c7b" title="Guest" subject="下划线" date="D:20231009085906+08'00'" creationdate="D:20231009085906+08'00'" coords="115.28636600000004,500.87581647999997,242.10700800000018,500.87581647999997,115.28636600000004,480.43956693999996,242.10700800000018,480.43956693999996"><contents>使用const声明数组</contents></underline><underline page="647" rect="199.333,237.544,334.408,257.740" color="#E44234" flags="print" name="27e2e217-14e2-3503-98ff-cbfbe8f9c9dd" title="Guest" subject="下划线" date="D:20231009090844+08'00'" creationdate="D:20231009090844+08'00'" coords="199.3331820000003,257.7399231999998,334.408422,257.7399231999998,199.3331820000003,237.54357093999988,334.408422,237.54357093999988"><contents>编译器计算元素个数</contents></underline><underline page="648" rect="50,356.922,545.276,446.659" color="#E44234" flags="print" name="16748a10-1b32-5828-5104-e06086ad6fe7" title="Guest" subject="下划线" date="D:20231009091438+08'00'" creationdate="D:20231009091438+08'00'" coords="170.06687999999986,446.6590311999999,505.5037259999999,446.6590311999999,170.06687999999986,426.46267893999993,505.5037259999999,426.46267893999993,50,422.6693031999999,545.2758800000001,422.6693031999999,50,402.4729509399999,545.2758800000001,402.4729509399999,50,395.9657372199999,545.2758800000001,395.9657372199999,50,380.91218289999995,545.2758800000001,380.91218289999995,50,371.97600921999987,230.10032,371.97600921999987,50,356.92245489999993,230.10032,356.92245489999993"><contents>sizeof运算符给出它的运算对象的大小（以字节为单
位）。所以sizeof days是整个数组的大小（以字节为单位），sizeof day[0]是
数组中一个元素的大小（以字节为单位）。整个数组的大小除以单个元素的
大小就是数组元素的个数。</contents></underline><underline page="649" rect="234.978,461.757,409.075,485.259" color="#E44234" flags="print" name="57a59f97-95a6-aeef-db00-918520286594" title="Guest" subject="下划线" date="D:20231009092645+08'00'" creationdate="D:20231009092644+08'00'" coords="234.97803699999986,485.2585035519999,409.0750129999997,485.2585035519999,234.97803699999986,461.75681658099995,409.0750129999997,461.75681658099995"><contents>指定初始化器（C99）</contents></underline><underline page="651" rect="259.367,185.875,384.686,209.377" color="#E44234" flags="print" name="4e58d3be-ba0b-db63-f205-061d7c5d094e" title="Guest" subject="下划线" date="D:20231009093324+08'00'" creationdate="D:20231009093323+08'00'" coords="259.36662199999955,209.37663155199982,384.686428,209.37663155199982,259.36662199999955,185.8749445809998,384.686428,185.8749445809998"><contents>给数组元素赋值</contents></underline><underline page="652" rect="50,372.486,545.276,440.662" color="#E44234" flags="print" name="d132edbb-4741-14b4-f6d2-fcb16c65d758" title="Guest" subject="下划线" date="D:20231009093524+08'00'" creationdate="D:20231009093524+08'00'" coords="410.2006399999991,440.6615991999999,545.2758799999992,440.6615991999999,410.2006399999991,420.46524693999993,545.2758799999992,420.46524693999993,50,413.9580332199999,545.2758799999992,413.9580332199999,50,398.90447889999996,545.2758799999992,398.90447889999996,50,392.68214319999987,80.01671999999962,392.68214319999987,50,372.4857909399999,80.01671999999962,372.4857909399999"><contents>C 不允许把数组作为
一个单元赋给另一个数组，除初始化以外也不允许使用花括号列表的形式赋
值。</contents></underline><underline page="651" rect="80.017,150.011,470.234,165.065" color="#E44234" flags="print" name="f2302939-4f24-6048-74c5-604d1886d64d" title="Guest" subject="下划线" date="D:20231009094101+08'00'" creationdate="D:20231009094101+08'00'" coords="80.01671999999962,165.06460521999986,470.23407999999927,165.06460521999986,80.01671999999962,150.01105089999987,470.23407999999927,150.01105089999987"><contents>声明数组后，可以借助数组下标（或索引）给数组元素赋值</contents></underline><underline page="653" rect="50,710.771,533.764,752.528" color="#E44234" flags="print" name="5e183380-0f07-ed34-6120-cd4c402893c1" title="Guest" subject="下划线" date="D:20231009094224+08'00'" creationdate="D:20231009094224+08'00'" coords="80.01672000000053,752.5280632,533.7644678800007,752.5280632,80.01672000000053,732.33171094,533.7644678800007,732.33171094,50,725.82449722,230.10032000000047,725.82449722,50,710.7709429,230.10032000000047,710.7709429"><contents>oxen数组的最后一个元素是oxen[SIZE-1]，所以oxen[SIZE]和yaks[SIZE]
都超出了两个数组的末尾。</contents></underline><underline page="651" rect="50,230.976,540.773,296.723" color="#E44234" flags="print" name="b6ee9e22-d626-981e-3b7c-534a1ff3640b" title="Guest" subject="下划线" date="D:20231009094341+08'00'" creationdate="D:20231009094341+08'00'" coords="80.01671999999962,296.7232311999999,540.7733719999997,296.7232311999999,80.01671999999962,276.52687893999985,540.7733719999997,276.52687893999985,50,272.73350319999986,536.2708640000001,272.73350319999986,50,252.53715093999983,536.2708640000001,252.53715093999983,50,246.02993721999985,95.02507999999943,246.02993721999985,50,230.97638289999986,95.02507999999943,230.97638289999986"><contents>编译器会把数组的大小设置为足够装得下初始化的值。所以，stuff数组
有7个元素，编号为0～6；而staff数组的元素比stuff数组多两个（即有9个元
素）。</contents></underline><square page="652" rect="72.540,36.560,510,313.390" color="#00CC63" flags="print" name="1c5c7b6b-3491-a4a4-1595-81cd8fb54d22" title="Guest" subject="矩形" date="D:20231009094440+08'00'" creationdate="D:20231009094439+08'00'"/><square page="653" rect="28.870,696.070,566.250,804.140" color="#00CC63" flags="print" name="e780f2cc-5d11-7001-bded-0c7a513ff111" title="Guest" subject="矩形" date="D:20231009094453+08'00'" creationdate="D:20231009094452+08'00'"/><underline page="655" rect="185.075,63.618,537.772,83.814" color="#E44234" flags="print" name="f3eb26b8-bc3a-bada-0d82-e5edf5cd2b8f" title="Guest" subject="下划线" date="D:20231009095141+08'00'" creationdate="D:20231009095141+08'00'" coords="185.07524000000012,83.81439519999981,537.7717000000002,83.81439519999981,185.07524000000012,63.61804293999978,537.7717000000002,63.61804293999978"><contents>数组元素的编号从0开始。最好是在声明数组时使用符</contents></underline><underline page="656" rect="50,773.744,215.092,788.798" color="#E44234" flags="print" name="d2f3e668-856d-dd12-f480-48999e9060d7" title="Guest" subject="下划线" date="D:20231009095153+08'00'" creationdate="D:20231009095153+08'00'" coords="50,788.79753322,215.09195999999974,788.79753322,50,773.7439789,215.09195999999974,773.7439789"><contents>号常量来表示数组的大小</contents></underline><square page="656" rect="58.480,487.340,453,761.950" color="#00CC63" flags="print" name="c7b69c3a-aff4-038c-d2fe-2a6172418c98" title="Guest" subject="矩形" date="D:20231009095246+08'00'" creationdate="D:20231009095245+08'00'"/><underline page="656" rect="50,96.604,535.520,140.790" color="#E44234" flags="print" name="5782ceef-b4d9-ba0f-1bce-9a786681cc96" title="Guest" subject="下划线" date="D:20231009095335+08'00'" creationdate="D:20231009095335+08'00'" coords="380.1839200000004,140.78999919999978,535.5204459999995,140.78999919999978,380.1839200000004,120.59364693999987,535.5204459999995,120.59364693999987,50,116.80027119999977,317.1488079999999,116.80027119999977,50,96.60391893999986,317.1488079999999,96.60391893999986"><contents>sizeof表达式被视为整型
常量，但是（与C++不同）const值不是。</contents></underline><square page="658" rect="33.310,168.560,569.950,480.180" color="#00CC63" flags="print" name="e911d99e-2d98-71d3-5b1a-bc57e6022be1" title="Guest" subject="矩形" date="D:20231009100005+08'00'" creationdate="D:20231009100003+08'00'"/><square page="659" rect="30.350,406.650,574.390,701.990" color="#00CC63" flags="print" name="6d4d6f6b-9bdc-c668-fe76-bf01b382147a" title="Guest" subject="矩形" date="D:20231009100040+08'00'" creationdate="D:20231009100033+08'00'"/><underline page="856" rect="50,432.640,545.276,498.387" color="#E44234" flags="print" name="c33f2a79-e79a-bd7d-fe99-bcdb06ed6e0c" title="Guest" subject="下划线" date="D:20231011100639+08'00'" creationdate="D:20231011100639+08'00'" coords="80.01671999999999,498.38688219999995,540.022954,498.38688219999995,80.01671999999999,478.1905299399999,540.022954,478.1905299399999,50,474.39715419999993,545.27588,474.39715419999993,50,454.20080193999996,545.27588,454.20080193999996,50,447.69358821999987,335.15884,447.69358821999987,50,432.64003389999993,335.15884,432.64003389999993"><contents>C语言能让程序员恰到好处地控制程序，这是它的优势之一。程序员通
过 C的内存管理系统指定变量的作用域和生命期，实现对程序的控制。合理
使用内存储存数据是设计程序的一个要点。</contents></underline><underline page="857" rect="50,608.635,545.276,674.097" color="#E44234" flags="print" name="1e298b21-d275-f748-6cba-e2336fa16cba" title="Guest" subject="下划线" date="D:20231011192122+08'00'" creationdate="D:20231011192122+08'00'" coords="440.21736,674.09664622,530.26752,674.09664622,440.21736,659.0430919,530.26752,659.0430919,50,652.8207562,545.27588,652.8207562,50,632.62440394,545.27588,632.62440394,50,628.8310282,356.92096200000003,628.8310282,50,608.63467594,356.92096200000003,608.63467594"><contents>从硬件方面来
看，被储存的每个值都占用一定的物理内存，C 语言把这样的一块内存称为
对象（object）。对象可以储存一个或多个值。</contents></underline><underline page="857" rect="50,476.121,545.276,515.165" color="#E44234" flags="print" name="761fc3d3-b131-8a96-ebc9-ceb4958c01f4" title="Guest" subject="下划线" date="D:20231011192204+08'00'" creationdate="D:20231011192204+08'00'" coords="80.01671999999999,515.16469822,545.27588,515.16469822,80.01671999999999,500.11114389999995,545.27588,500.11114389999995,50,491.1749702199999,80.01671999999999,491.1749702199999,50,476.12141589999993,80.01671999999999,476.12141589999993"><contents>从软件方面来看，程序需要一种方法访问对象。这可以通过声明变量来
完成</contents></underline><underline page="857" rect="50,302.196,540.023,367.943" color="#E44234" flags="print" name="ff4bc868-b8f2-30ee-2f86-3ab809a94d20" title="Guest" subject="下划线" date="D:20231011192255+08'00'" creationdate="D:20231011192255+08'00'" coords="417.70482000000004,367.9427361999999,540.022954,367.9427361999999,417.70482000000004,347.74638393999993,540.022954,347.74638393999993,50,343.9530081999999,540.022954,343.9530081999999,50,323.75665593999986,540.022954,323.75665593999986,50,317.2494422199999,110.03344,317.2494422199999,50,302.1958878999999,110.03344,302.1958878999999"><contents>标识符entity即是软
件（即C程序）指定硬件内存中的对象的方式。该声明还提供了储存在对象
中的值。</contents></underline><underline page="857" rect="50,71.865,545.276,116.051" color="#E44234" flags="print" name="2fc4ccd9-8a72-9453-0b3d-feb203f6f752" title="Guest" subject="下划线" date="D:20231011193110+08'00'" creationdate="D:20231011193110+08'00'" coords="395.19228000000004,116.05059219999976,545.27588,116.05059219999976,395.19228000000004,95.85423993999984,545.27588,95.85423993999984,50,92.06086419999974,327.65466000000004,92.06086419999974,50,71.86451193999972,327.65466000000004,71.86451193999972"><contents>。一般而言，那些指定
对象的表达式被称为左值（第5章介绍过）</contents></underline><underline page="858" rect="50,699.346,545.276,791.148" color="#E44234" flags="print" name="e0c6f314-82ca-fef0-07ce-3dc011839971" title="Guest" subject="下划线" date="D:20231011194904+08'00'" creationdate="D:20231011194904+08'00'" coords="80.01671999999996,791.14824168598,545.27588,791.14824168598,80.01671999999996,770.95188942598,545.27588,770.95188942598,50,767.5216432,537.7717,767.5216432,50,747.3252909400001,537.7717,747.3252909400001,50,743.5319152,545.27588,743.5319152,50,723.33556294,545.27588,723.33556294,50,719.5421872000001,209.088616,719.5421872000001,50,699.34583494,209.088616,699.34583494"><contents>*pt既是表达式也是左值。按照这个思路，ranks + 2 * entity既不是标识符
（不是名称），也不是左值（它不指定内存位置上的内容）。但是表达式*
(ranks + 2 * entity)是一个左值，因为它的确指定了特定内存位置的值，即
ranks数组的第7个元素。</contents></underline><underline page="858" rect="50,392.907,545.276,482.644" color="#E44234" flags="print" name="fac23c66-5ca1-de9a-2f1b-112522e91c1c" title="Guest" subject="下划线" date="D:20231011195944+08'00'" creationdate="D:20231011195944+08'00'" coords="95.02508,482.6436231999999,543.775044,482.6436231999999,95.02508,462.44727093999995,543.775044,462.44727093999995,50,458.65389519999997,544.5254620000001,458.65389519999997,50,438.45754293999994,544.5254620000001,438.45754293999994,50,434.6641671999999,545.27588,434.6641671999999,50,414.4678149399999,545.27588,414.4678149399999,50,407.9606012199999,260.11704,407.9606012199999,50,392.90704689999995,260.11704,392.90704689999995"><contents>由于可以设置pc重新指向其他字符串，所以标识符pc是一个可修改的
左值。const只能保证被pc指向的字符串内容不被修改，但是无法保证pc不指
向别的字符串。由于*pc指定了储存'B'字符的数据对象，所以*pc 是一个左
值，但不是一个可修改的左值。</contents></underline><underline page="858" rect="50,368.917,545.276,407.961" color="#E44234" flags="print" name="57d61cb0-7907-600a-dc57-d988005e9b17" title="Guest" subject="下划线" date="D:20231011200033+08'00'" creationdate="D:20231011200033+08'00'" coords="365.17556,407.9606012199999,545.27588,407.9606012199999,365.17556,392.90704689999995,545.27588,392.90704689999995,50,383.9708732199999,470.23408000000006,383.9708732199999,50,368.91731889999994,470.23408000000006,368.91731889999994"><contents>字符串字面量本身指定了储
存字符串的对象，所以它也是一个左值，但不是可修改的左值。</contents></underline><underline page="858" rect="50,279.526,545.276,347.701" color="#E44234" flags="print" name="1baf1239-4208-4437-e902-3b8385bfb8b0" title="Guest" subject="下划线" date="D:20231011200421+08'00'" creationdate="D:20231011200421+08'00'" coords="80.01671999999996,347.70140319999985,545.27588,347.70140319999985,80.01671999999996,327.50505093999993,545.27588,327.50505093999993,50,323.71167519999983,534.770028,323.71167519999983,50,303.5153229399999,534.770028,303.5153229399999,50,299.7219471999998,212.84070599999995,299.7219471999998,50,279.5255949399999,212.84070599999995,279.5255949399999"><contents>可以用存储期（storage duration）描述对象，所谓存储期是指对象在内
存中保留了多长时间。标识符用于访问对象，可以用作用域（scope）和链
接（linkage）描述标识符</contents></underline><underline page="859" rect="50,701.775,545.276,740.818" color="#E44234" flags="print" name="dd4d4173-6f14-a5ad-4b79-d2955c03f4df" title="Guest" subject="下划线" date="D:20231011200744+08'00'" creationdate="D:20231011200744+08'00'" coords="335.15884000000005,740.8180772200001,545.2758799999999,740.8180772200001,335.15884000000005,725.7645229,545.2758799999999,725.7645229,50,716.8283492200001,515.2591600000001,716.8283492200001,50,701.7747949,515.2591600000001,701.7747949"><contents>块是用一对花括号括起来的代码
区域。例如，整个函数体是一个块，函数中的任意复合语句也是一个块</contents></underline><underline page="860" rect="50,222.550,545.276,314.716" color="#E44234" flags="print" name="ad40b6ef-219c-8144-61e1-0125d6c801f6" title="Guest" subject="下划线" date="D:20231011201516+08'00'" creationdate="D:20231011201516+08'00'" coords="80.01672000000008,314.7155271999999,531.0179380000002,314.7155271999999,80.01672000000008,294.51917493999986,531.0179380000002,294.51917493999986,50,290.72579919999987,545.2758800000001,290.72579919999987,50,270.52944693999984,545.2758800000001,270.52944693999984,50,266.73607119999986,524.2641760000001,266.73607119999986,50,246.53971893999983,524.2641760000001,246.53971893999983,50,242.74634319999984,524.2641760000001,242.74634319999984,50,222.54999093999993,524.2641760000001,222.54999093999993"><contents>为适应这个新特性，C99把块的概念扩展到包括for循环、while循环、
do while循环和if语句所控制的代码，即使这些代码没有用花括号括起来，
也算是块的一部分。所以，上面for循环中的变量i被视为for循环块的一部
分，它的作用域仅限于for循环。一旦程序离开for循环，就不能再访问i。</contents></underline><underline page="860" rect="50,114.026,545.276,203.763" color="#E44234" flags="print" name="aeb7171e-983b-f983-5411-85d098eec889" title="Guest" subject="下划线" date="D:20231011204757+08'00'" creationdate="D:20231011204757+08'00'" coords="80.01672000000008,203.76303519999988,545.2758800000001,203.76303519999988,80.01672000000008,183.56668293999985,545.2758800000001,183.56668293999985,50,177.05946921999987,545.2758800000001,177.05946921999987,50,162.00591489999988,545.2758800000001,162.00591489999988,50,153.06974121999986,545.2758800000001,153.06974121999986,50,138.01618689999987,545.2758800000001,138.01618689999987,50,129.08001321999984,80.01672000000008,129.08001321999984,50,114.02645889999985,80.01672000000008,114.02645889999985"><contents>函数作用域（function scope）仅用于goto语句的标签。这意味着即使一
个标签首次出现在函数的内层块中，它的作用域也延伸至整个函数。如果在
两个块中使用相同的标签会很混乱，标签的函数作用域防止了这样的事情发
生。</contents></underline><square page="861" rect="55.740,91.640,584.980,443.810" color="#00CC63" flags="print" name="75f09c6c-cb91-6340-e21b-743fde2eab0b" title="Guest" subject="矩形" date="D:20231011210519+08'00'" creationdate="D:20231011210517+08'00'"/><underline page="862" rect="50,462.447,536.271,530.623" color="#E44234" flags="print" name="95d78835-84c1-ac66-7460-55406493aad2" title="Guest" subject="下划线" date="D:20231011210702+08'00'" creationdate="D:20231011210702+08'00'" coords="341.1621839999998,530.6230791999999,536.2708640000001,530.6230791999999,341.1621839999998,510.42672694,536.2708640000001,510.42672694,50,503.91951321999994,485.24244,503.91951321999994,50,488.86595889999995,485.24244,488.86595889999995,50,482.6436231999999,185.07523999999967,482.6436231999999,50,462.44727093999995,185.07523999999967,462.44727093999995"><contents>编译器源代码文件和所有的头
文件都看成是一个包含信息的单独文件。这个文件被称为翻译单元
（translation unit）。</contents></underline><underline page="862" rect="50,440.887,545.276,482.644" color="#E44234" flags="print" name="9450ccc8-2b43-474a-e3c0-02759a9855d8" title="Guest" subject="下划线" date="D:20231011210713+08'00'" creationdate="D:20231011210713+08'00'" coords="185.07523999999967,482.6436231999999,545.2758799999997,482.6436231999999,185.07523999999967,462.44727093999995,545.2758799999997,462.44727093999995,50,455.9400572199999,170.06687999999986,455.9400572199999,50,440.8865028999999,170.06687999999986,440.8865028999999"><contents>描述一个具有文件作用域的变量时，它的实际可见范围
是整个翻译单元。</contents></underline><underline page="862" rect="50,416.897,545.276,455.940" color="#E44234" flags="print" name="b2f63384-5061-e740-dc86-e6ded83b3854" title="Guest" subject="下划线" date="D:20231011210747+08'00'" creationdate="D:20231011210747+08'00'" coords="170.06687999999986,455.9400572199999,545.2758799999997,455.9400572199999,170.06687999999986,440.8865028999999,545.2758799999997,440.8865028999999,50,431.9503292199999,515.2591600000001,431.9503292199999,50,416.8967748999999,515.2591600000001,416.8967748999999"><contents>如果程序由多个源代码文件组成，那么该程序也将由多个
翻译单元组成。每个翻译单元均对应一个源代码文件和它所包含的文件</contents></underline><text page="862" rect="50,499.623,81,530.623" color="#FFFF00" flags="print,nozoom,norotate" inreplyto="95d78835-84c1-ac66-7460-55406493aad2" name="6de73bc6-95dd-82b0-077f-7b9203c5e2d4" title="Guest" subject="注释" date="D:20231012084925+08'00'" creationdate="D:20231012084925+08'00'" icon="Comment" statemodel="Review"><trn-custom-data bytes="{&quot;trn-mention&quot;:&quot;{\&quot;contents\&quot;:\&quot;也就是说，翻译单元是一个具有多个头文件和源代码的源文件\&quot;,\&quot;ids\&quot;:[]}&quot;}"/><contents>也就是说，翻译单元是一个具有多个头文件和源代码的源文件</contents></text><underline page="863" rect="50,747.325,545.276,788.798" color="#E44234" flags="print" name="e8c37ad3-ba5a-2cce-9981-bdc32460c6f0" title="Guest" subject="下划线" date="D:20231012085450+08'00'" creationdate="D:20231012085450+08'00'" coords="80.01672000000008,788.79753322,545.2758800000001,788.79753322,80.01672000000008,773.7439789,545.2758800000001,773.7439789,50,767.5216432,276.53618584000014,767.5216432,50,747.3252909400001,276.53618584000014,747.3252909400001"><contents>如何知道文件作用域变量是内部链接还是外部链接？可以查看外部定义
中是否使用了存储类别说明符static</contents></underline><square page="863" rect="49.180,412.340,552.190,734.990" color="#00CC63" flags="print" name="b5e4ce1e-2b98-f7ad-e250-ad3ab89e0fc6" title="Guest" subject="矩形" date="D:20231012085649+08'00'" creationdate="D:20231012085539+08'00'"/><underline page="863" rect="50,284.953,545.276,347.986" color="#E44234" flags="print" name="6d6b4157-ac50-ab24-ed93-5cd62939f3f0" title="Guest" subject="下划线" date="D:20231012090015+08'00'" creationdate="D:20231012090015+08'00'" coords="80.01672000000008,347.98628121999985,545.2758800000001,347.98628121999985,80.01672000000008,332.9327268999999,545.2758800000001,332.9327268999999,50,326.7103911999999,532.5187740000001,326.7103911999999,50,306.51403893999986,532.5187740000001,306.51403893999986,50,300.0068252199999,230.10032,300.0068252199999,50,284.9532708999999,230.10032,284.9532708999999"><contents>作用域和链接描述了标识符的可见性。存储期描述了通过这些标识符访
问的对象的生存期。C对象有4种存储期：静态存储期、线程存储期、自动
存储期、动态分配存储期。</contents></underline><square page="865" rect="53.780,237.890,546.940,397.910" color="#00CC63" flags="print" name="85e625b7-c654-1add-ff60-5a20b9e6ac67" title="Guest" subject="矩形" date="D:20231012094659+08'00'" creationdate="D:20231012094658+08'00'"/><underline page="866" rect="50,647.798,545.276,713.545" color="#E44234" flags="print" name="1bb798b0-477e-aba5-e932-8899fee996ec" title="Guest" subject="下划线" date="D:20231012095002+08'00'" creationdate="D:20231012095002+08'00'" coords="80.01671999999962,713.5447552,545.2758800000001,713.5447552,80.01671999999962,693.34840294,545.2758800000001,693.34840294,50,689.5550272,531.7683559999996,689.5550272,50,669.35867494,531.7683559999996,669.35867494,50,662.85146122,170.0668799999994,662.85146122,50,647.7979069,170.0668799999994,647.7979069"><contents>关键字auto是存储类别说明符（storage-class specifier）。auto关键字在
C++中的用法完全不同，如果编写C/C++兼容的程序，最好不要使用auto作
为存储类别说明符</contents></underline><underline page="865" rect="50,94.355,545.276,135.827" color="#E44234" flags="print" name="d4ea2397-7132-ed3c-0e7d-d701bd0bec99" title="Guest" subject="下划线" date="D:20231012095022+08'00'" creationdate="D:20231012095022+08'00'" coords="200.08359999999993,135.82712421999986,545.2758800000001,135.82712421999986,200.08359999999993,120.77356989999987,545.2758800000001,120.77356989999987,50,114.55123419999984,230.10031999999956,114.55123419999984,50,94.35488193999981,230.10031999999956,94.35488193999981"><contents>为了表明有意覆盖一个外部变量定义，或者强调不要
把该变量改为其他存储类别</contents></underline><underline page="866" rect="50,536.845,545.276,575.889" color="#E44234" flags="print" name="a8c4802b-afd6-cc38-599e-1a833889eea9" title="Guest" subject="下划线" date="D:20231012095608+08'00'" creationdate="D:20231012095608+08'00'" coords="140.05015999999978,575.88869722,545.2758800000001,575.88869722,140.05015999999978,560.8351428999999,545.2758800000001,560.8351428999999,50,551.89896922,200.08359999999993,551.89896922,50,536.8454148999999,200.08359999999993,536.8454148999999"><contents>另一个函数可以使用同名变量，但是该变量是储存在不同内存
位置上的另一个变量。</contents></underline><underline page="866" rect="185.075,410.899,230.100,425.953" color="#E44234" flags="print" name="c4d69081-12c6-59bf-cc93-69db051cd92b" title="Guest" subject="下划线" date="D:20231012123839+08'00'" creationdate="D:20231012123839+08'00'" coords="185.07524000000012,425.9528972199999,230.10031999999956,425.9528972199999,185.07524000000012,410.8993428999999,230.10031999999956,410.8993428999999"><contents>嵌套块</contents></underline><underline page="867" rect="110.033,497.862,440.217,512.916" color="#E44234" flags="print" name="ab0e110f-5f52-b3c3-ddbc-8e08df074b36" title="Guest" subject="下划线" date="D:20231012124355+08'00'" creationdate="D:20231012124355+08'00'" coords="110.03343999999925,512.91566122,440.21735999999964,512.91566122,110.03343999999925,497.86210689999996,440.21735999999964,497.86210689999996"><contents>内层块中声明的变量与外层块中的变量同名会怎样</contents></underline><underline page="869" rect="50,162.576,534.020,230.751" color="#E44234" flags="print" name="ca1c2393-c944-477b-9b75-c1a4008a534a" title="Guest" subject="下划线" date="D:20231012124641+08'00'" creationdate="D:20231012124641+08'00'" coords="80.01672000000053,230.75147919999984,534.0196100000003,230.75147919999984,80.01672000000053,210.55512693999992,534.0196100000003,210.55512693999992,50,206.76175119999982,525.5098698800002,206.76175119999982,50,186.5653989399999,525.5098698800002,186.5653989399999,50,182.7720231999998,308.14379200000076,182.7720231999998,50,162.5756709399999,308.14379200000076,162.5756709399999"><contents>前面提到一个C99特性：作为循环或if语句的一部分，即使不使用花括
号（{}），也是一个块。更完整地说，整个循环是它所在块的子块（sub-
block），循环体是整个循环块的子块。</contents></underline><underline page="872" rect="50,409.220,537.772,453.406" color="#E44234" flags="print" name="c4cf8a3c-efcf-c007-5318-61e2ca222b94" title="Guest" subject="下划线" date="D:20231012125004+08'00'" creationdate="D:20231012125004+08'00'" coords="371.17890400000033,453.4061421999999,537.7717000000002,453.4061421999999,371.17890400000033,433.20978993999995,537.7717000000002,433.20978993999995,50,429.4164141999999,245.10868000000028,429.4164141999999,50,409.22006193999994,245.10868000000028,409.22006193999994"><contents>之前占用分配给repid的空
间中的任意值（如果有的话）</contents></underline><underline page="873" rect="50,545.842,545.276,584.885" color="#E44234" flags="print" name="d558e99c-b703-ee02-0f07-45911d9833d0" title="Guest" subject="下划线" date="D:20231012165614+08'00'" creationdate="D:20231012165614+08'00'" coords="200.08359999999993,584.88484522,545.2758799999992,584.88484522,200.08359999999993,569.8312909,545.2758799999992,569.8312909,50,560.89511722,440.21736000000055,560.89511722,50,545.8415629,440.21736000000055,545.8415629"><contents>编译器必须根据寄存器或最快可用内存的数量衡量你
的请求，或者直接忽略你的请求，所以可能不会如你所愿。</contents></underline><underline page="873" rect="50,569.831,543.775,611.588" color="#E44234" flags="print" name="d7563774-bc2b-c2f7-4e28-315e9358a583" title="Guest" subject="下划线" date="D:20231012165619+08'00'" creationdate="D:20231012165619+08'00'" coords="273.62456399999974,611.5884112,543.775044,611.5884112,273.62456399999974,591.39205894,543.775044,591.39205894,50,584.88484522,200.08359999999993,584.88484522,50,569.8312909,200.08359999999993,569.8312909"><contents>是因为声明变量为register类别与直接命令
相比更像是一种请求。</contents></underline><squiggly page="874" rect="80.017,732.332,304.846,791.751" color="#E44234" flags="print" name="7216b0dd-7d7a-1b84-e15b-384cff1f3da1" title="Guest" subject="曲线" date="D:20231012170347+08'00'" creationdate="D:20231012170347+08'00'" coords="80.01672000000144,791.75126848,263.86913000000095,791.75126848,80.01672000000144,771.3150189400001,263.86913000000095,771.3150189400001,80.01672000000144,752.5280632,304.8460566484373,752.5280632,80.01672000000144,732.33171094,304.8460566484373,732.33171094"><contents>程序清单12.3 loc_stat.c程序
/* loc_stat.c -- 使用局部静态变量 */</contents></squiggly><underline page="875" rect="80.017,72.614,291.635,92.811" color="#E44234" flags="print" name="a6ed3d3b-ba01-0acf-6b32-eee59624f415" title="Guest" subject="下划线" date="D:20231012170615+08'00'" creationdate="D:20231012170615+08'00'" coords="80.01671999999962,92.81054319999976,291.6345959999999,92.81054319999976,80.01671999999962,72.61419093999973,291.6345959999999,72.61419093999973"><contents>不能在函数的形参中使用static：</contents></underline><underline page="880" rect="50,270.529,530.268,353.939" color="#E44234" flags="print" name="bb1bd763-789f-d141-6d4b-53c5d2a4b14c" title="Guest" subject="下划线" date="D:20231012175419+08'00'" creationdate="D:20231012175419+08'00'" coords="91.27298999999948,353.9387324799999,200.83401799999956,353.9387324799999,91.27298999999948,333.5024829399999,200.83401799999956,333.5024829399999,80.01671999999962,312.0016892199999,530.2675199999994,312.0016892199999,80.01671999999962,296.9481348999999,530.2675199999994,296.9481348999999,50,290.72579919999987,425.20900000000074,290.72579919999987,50,270.52944693999984,425.20900000000074,270.52944693999984"><contents>初始化外部变量
外部变量和自动变量类似，也可以被显式初始化。与自动变量不同的
是，如果未初始化外部变量，它们会被自动初始化为 0。</contents></underline><underline page="880" rect="50,224.979,545.276,264.022" color="#E44234" flags="print" name="a2faf4a7-43c5-134a-4a87-b4aa45a7db82" title="Guest" subject="下划线" date="D:20231012175543+08'00'" creationdate="D:20231012175543+08'00'" coords="215.09195999999974,264.02223321999986,545.2758799999992,264.02223321999986,215.09195999999974,248.96867889999987,545.2758799999992,248.96867889999987,50,240.03250521999985,155.0585200000005,240.03250521999985,50,224.97895089999986,155.0585200000005,224.97895089999986"><contents>自动变量的情况不同，只能使用常量表达式初始化
文件作用域变量</contents></underline><squiggly page="880" rect="80.017,66.617,521.263,203.763" color="#E44234" flags="print" name="5dc710ad-33c4-71ea-376b-232a90dbb1b6" title="Guest" subject="曲线" date="D:20231012175551+08'00'" creationdate="D:20231012175551+08'00'" coords="80.01671999999962,203.76303519999988,140.4703940799991,203.76303519999988,80.01671999999962,183.56668293999985,140.4703940799991,183.56668293999985,80.01671999999962,164.7797271999998,163.73335208000026,164.7797271999998,80.01671999999962,144.58337493999989,163.73335208000026,144.58337493999989,80.01671999999962,125.79641919999983,205.00634207999974,125.79641919999983,80.01671999999962,105.6000669399998,205.00634207999974,105.6000669399998,80.01671999999962,86.81311119999975,161.48209807999956,86.81311119999975,80.01671999999962,66.61675893999973,161.48209807999956,66.61675893999973,278.87749000000076,203.76303519999988,411.7014760000002,203.76303519999988,278.87749000000076,183.56668293999985,411.7014760000002,183.56668293999985,268.37163800000053,164.7797271999998,521.2625040000003,164.7797271999998,268.37163800000053,144.58337493999989,521.2625040000003,144.58337493999989,238.3549179999991,125.79641919999983,487.4936940000007,125.79641919999983,238.3549179999991,105.6000669399998,487.4936940000007,105.6000669399998,251.11202400000002,86.81311119999975,360.6730520000001,86.81311119999975,251.11202400000002,66.61675893999973,360.6730520000001,66.61675893999973"><contents>int x = 10;
int y = 3 + 20;
size_t z = sizeof(int);
int x2 = 2 * x;
// 没问题，10是常量
// 没问题，用于初始化的是常量表达式
//没问题，用于初始化的是常量表达式
// 不行，x是变量</contents></squiggly><underline page="882" rect="50,194.992,545.276,260.739" color="#E44234" flags="print" name="eede6159-bbb3-114a-2294-153b1467a7c8" title="Guest" subject="下划线" date="D:20231012175857+08'00'" creationdate="D:20231012175857+08'00'" coords="452.97446599999967,260.73863919999985,540.7733719999997,260.73863919999985,452.97446599999967,240.54228693999983,540.7733719999997,240.54228693999983,50,236.74891119999984,545.2758799999992,236.74891119999984,50,216.55255893999993,545.2758799999992,216.55255893999993,50,210.04534521999983,125.04179999999906,210.04534521999983,50,194.99179089999984,125.04179999999906,194.99179089999984"><contents>标识符units访
问相同的变量。用C的术语来描述是， units具有文件作用域、外部链接和静
态存储期。</contents></underline><squiggly page="882" rect="422.958,240.542,498.000,260.739" color="#E44234" flags="print" name="10316e2d-a772-3c7c-4230-a2430cc3aa51" title="Guest" subject="曲线" date="D:20231012180002+08'00'" creationdate="D:20231012180002+08'00'" coords="422.95774600000004,260.73863919999985,497.9995459999991,260.73863919999985,422.95774600000004,240.54228693999983,497.9995459999991,240.54228693999983"><contents>通过标识符</contents></squiggly><underline page="882" rect="50,129.590,543.775,173.776" color="#E44234" flags="print" name="25299a36-b778-0e58-0ec5-557bacef205e" title="Guest" subject="下划线" date="D:20231012180102+08'00'" creationdate="D:20231012180102+08'00'" coords="80.01671999999962,173.77587519999986,540.7733719999997,173.77587519999986,80.01671999999962,153.57952293999983,540.7733719999997,153.57952293999983,50,149.78614719999985,543.775044,149.78614719999985,50,129.58979493999982,543.775044,129.58979493999982"><contents>把units定义在所有函数定义外面（即外部），units便是一个外部变量，
对units定义下面的所有函数均可见。因此，critics()可以直接使用units变量。</contents></underline><underline page="883" rect="50,488.866,545.276,641.815" color="#E44234" flags="print" name="4988fb58-3c14-432f-20da-998c433816c7" title="Guest" subject="下划线" date="D:20231012203844+08'00'" creationdate="D:20231012203844+08'00'" coords="80.01671999999962,641.8154684799999,153.55768400000125,641.8154684799999,80.01671999999962,621.37921894,153.55768400000125,621.37921894,80.01671999999962,602.5922631999999,534.0196100000012,602.5922631999999,80.01671999999962,582.39591094,534.0196100000012,582.39591094,50,578.6025351999999,545.275880000001,578.6025351999999,50,558.40618294,545.275880000001,558.40618294,50,554.6128071999999,537.7717000000011,554.6128071999999,50,534.41645494,537.7717000000011,534.41645494,50,527.90924122,530.2675200000012,527.90924122,50,512.8556868999999,530.2675200000012,512.8556868999999,50,503.91951321999994,200.08359999999993,503.91951321999994,50,488.86595889999995,200.08359999999993,488.86595889999995"><contents>3.外部名称
C99和C11标准都要求编译器识别局部标识符的前63个字符和外部标识
符的前31个字符。这修订了以前的标准，即编译器识别局部标识符前31个字
符和外部标识符前6个字符。你所用的编译器可能还执行以前的规则。外部
变量名比局部变量名的规则严格，是因为外部变量名还要遵循局部环境规
则，所受的限制更多。</contents></underline><text page="883" rect="50,610.815,81,641.815" color="#FFFF00" flags="print,nozoom,norotate" inreplyto="4988fb58-3c14-432f-20da-998c433816c7" name="d36edbab-7297-2720-240a-9c22fab8e4aa" title="Guest" subject="注释" date="D:20231012203850+08'00'" creationdate="D:20231012203850+08'00'" icon="Comment" statemodel="Review"><trn-custom-data bytes="{&quot;trn-mention&quot;:&quot;{\&quot;contents\&quot;:\&quot;ASCII\&quot;,\&quot;ids\&quot;:[]}&quot;}"/><contents>ASCII</contents></text><squiggly page="886" rect="50,527.849,545.276,593.596" color="#E44234" flags="print" name="0246cc1c-9431-a541-fe5f-da4cf2f91e2c" title="Guest" subject="曲线" date="D:20231012210104+08'00'" creationdate="D:20231012210104+08'00'" coords="80.01671999999962,593.5961152,545.2758799999992,593.5961152,80.01671999999962,573.39976294,545.2758799999992,573.39976294,50,569.6063872,545.2758799999992,569.6063872,50,549.41003494,545.2758799999992,549.41003494,50,542.90282122,440.21735999999873,542.90282122,50,527.8492669,440.21735999999873,527.8492669"><contents>过去，不同的编译器遵循不同的规则。例如，许多 UNIX系统允许在多
个文件中不使用 extern 关键字声明变量，前提是只有一个带初始化的声明。
编译器会把文件中一个带初始化的声明视为该变量的定义。</contents></squiggly><underline page="893" rect="50,671.608,545.276,737.070" color="#E44234" flags="print" name="5959ba7b-7979-9ffc-2767-b59e9fa8e9ba" title="Guest" subject="下划线" date="D:20231014165228+08'00'" creationdate="D:20231014165228+08'00'" coords="470.23407999999995,737.06968222,545.27588,737.06968222,470.23407999999995,722.0161279,545.27588,722.0161279,50,715.7937922,545.0207378800001,715.7937922,50,695.59743994,545.0207378800001,695.59743994,50,691.8040642,170.06688,691.8040642,50,671.60771194,170.06688,671.60771194"><contents>首先，来看
一个使用内部链接的静态变量的函数：随机数函数。ANSI C库提供了rand()
函数生成随机数。</contents></underline><underline page="893" rect="50,602.067,535.520,643.825" color="#E44234" flags="print" name="99923f39-ff0d-be63-9dbf-113855887ed9" title="Guest" subject="下划线" date="D:20231014165257+08'00'" creationdate="D:20231014165257+08'00'" coords="305.14212,643.8246082000001,535.520446,643.8246082000001,305.14212,623.6282559399999,535.520446,623.6282559399999,50,617.1210422199999,485.24244000000004,617.1210422199999,50,602.0674879,485.24244000000004,602.0674879"><contents>rand()是“伪随机数生成器”，意思是
可预测生成数字的实际序列。但是，数字在其取值范围内均匀分布</contents></underline><underline page="893" rect="50,515.105,535.520,556.862" color="#E44234" flags="print" name="a4e6e4dc-575c-6ec5-e171-4434b89467c2" title="Guest" subject="下划线" date="D:20231014165344+08'00'" creationdate="D:20231014165344+08'00'" coords="490.495366,556.8618442,535.520446,556.8618442,490.495366,536.66549194,535.520446,536.66549194,50,530.1582782199999,395.19228000000004,530.1582782199999,50,515.1047239,395.19228000000004,515.1047239"><contents>该函数
使用该种子生成新的数，这个新数又成为新的种子。</contents></underline><underline page="894" rect="50,684.352,545.276,728.538" color="#E44234" flags="print" name="e96f8e22-8b22-2f4b-be8e-518a70419b04" title="Guest" subject="下划线" date="D:20231014165554+08'00'" creationdate="D:20231014165554+08'00'" coords="305.14212,728.5383352,545.27588,728.5383352,305.14212,708.34198294,545.27588,708.34198294,50,704.5486072,449.22237600000005,704.5486072,50,684.35225494,449.22237600000005,684.35225494"><contents>该函数是用于返回一个0～32767之间
的值。注意，next是具有内部链接的静态变量（并非无链接）</contents></underline><underline page="894" rect="185.075,662.791,395.192,677.845" color="#E44234" flags="print" name="676690ac-2d92-8dc0-7c87-b5852e004683" title="Guest" subject="下划线" date="D:20231014165600+08'00'" creationdate="D:20231014165600+08'00'" coords="185.07524,677.84504122,395.19228,677.84504122,185.07524,662.7914869,395.19228,662.7914869"><contents>同一个文件中的其他函数共享。</contents></underline><underline page="895" rect="50,318.509,543.775,362.695" color="#E44234" flags="print" name="bc66f01c-384b-2045-10e6-e1213fdea0f7" title="Guest" subject="下划线" date="D:20231014165840+08'00'" creationdate="D:20231014165840+08'00'" coords="290.13375999999994,362.69498319999985,543.775044,362.69498319999985,290.13375999999994,342.4986309399999,543.775044,342.4986309399999,50,338.70525519999984,267.62122,338.70525519999984,50,318.50890293999987,267.62122,318.50890293999987"><contents>这体现了“伪随机”的一个方面。每次主
程序运行，都开始于相同的种子1</contents></underline><underline page="903" rect="50,636.373,543.025,680.559" color="#E44234" flags="print" name="4d5af814-00a2-993c-fe65-5b70fe9027d4" title="Guest" subject="下划线" date="D:20231014172653+08'00'" creationdate="D:20231014172653+08'00'" coords="182.8239860000001,680.5588792,543.0246260000001,680.5588792,182.8239860000001,660.36252694,543.0246260000001,660.36252694,50,656.5691512,500.2508,656.5691512,50,636.3727989399999,500.2508,636.3727989399999"><contents>把文件名放在双引号中而不是尖括号中，指示编译器在
本地查找文件，而不是到编译器存放标准头文件的位置去查找文件。</contents></underline><underline page="903" rect="50,590.822,537.021,656.569" color="#E44234" flags="print" name="53b4fa13-5f33-fcea-45b3-3fb5f067dbca" title="Guest" subject="下划线" date="D:20231014172725+08'00'" creationdate="D:20231014172725+08'00'" coords="500.2508,656.5691512,537.0212820000002,656.5691512,500.2508,636.3727989399999,537.0212820000002,636.3727989399999,50,632.5794232,537.0212820000002,632.5794232,50,612.3830709399999,537.0212820000002,612.3830709399999,50,605.87585722,500.2508,605.87585722,50,590.8223029,500.2508,590.8223029"><contents>“本地
查找”的含义取决于具体的实现。一些常见的实现把头文件与源代码文件或
工程文件（如果编译器使用它们的话）放在相同的目录或文件夹中。</contents></underline><underline page="909" rect="50,674.037,545.276,737.070" color="#E44234" flags="print" name="5d72d5e8-7acf-0ce6-dcf6-49b9be542393" title="Guest" subject="下划线" date="D:20231016092726+08'00'" creationdate="D:20231016092726+08'00'" coords="365.17556,737.06968222,545.27588,737.06968222,365.17556,722.0161279,545.27588,722.0161279,50,713.07995422,545.27588,713.07995422,50,698.0263999,545.27588,698.0263999,50,689.09022622,350.16720000000004,689.09022622,50,674.0366719,350.16720000000004,674.0366719"><contents>在确定用哪种存储类别后，
根据已制定好的内存管理规则，将自动选择其作用域和存储期。然而，还有
更灵活地选择，即用库函数分配和管理内存。</contents></underline><underline page="909" rect="140.050,611.064,335.159,626.117" color="#E44234" flags="print" name="dc1e0e7a-2ddb-6d1f-6867-a1fda2f0fa22" title="Guest" subject="下划线" date="D:20231016092905+08'00'" creationdate="D:20231016092905+08'00'" coords="140.05016,626.11719022,335.15884,626.11719022,140.05016,611.0636359,335.15884,611.0636359"><contents>这些内存中有些是自动分配的</contents></underline><underline page="909" rect="50,185.246,545.276,298.972" color="#E44234" flags="print" name="ad119326-03de-30f9-aee9-048c98033aa9" title="Guest" subject="下划线" date="D:20231016093141+08'00'" creationdate="D:20231016093141+08'00'" coords="260.11704,298.9722681999998,545.27588,298.9722681999998,260.11704,278.7759159399999,545.27588,278.7759159399999,50,274.9825401999999,542.274208,274.9825401999999,50,254.78618793999988,542.274208,254.78618793999988,50,250.9928121999999,545.27588,250.9928121999999,50,230.79645993999986,545.27588,230.79645993999986,50,224.28924621999988,545.27588,224.28924621999988,50,209.2356918999999,545.27588,209.2356918999999,50,200.29951821999987,500.2508,200.29951821999987,50,185.24596389999988,500.2508,185.24596389999988"><contents>程序运行时分配更多的内存。主要的工具是
malloc()函数，该函数接受一个参数：所需的内存字节数。malloc()函数会找
到合适的空闲内存块，这样的内存是匿名的。也就是说， malloc()分配内
存，但是不会为其赋名。然而，它确实返回动态分配内存块的首字节地址。
因此，可以把该地址赋给一个指针变量，并使用指针访问这块内存。</contents></underline><underline page="910" rect="50,159.007,545.276,326.710" color="#E44234" flags="print" name="57df6c9f-5f4c-9bee-43ad-b923bd24ff7d" title="Guest" subject="下划线" date="D:20231016095534+08'00'" creationdate="D:20231016095534+08'00'" coords="80.01671999999996,326.7103911999999,540.022954,326.7103911999999,80.01671999999996,306.51403893999986,540.022954,306.51403893999986,50,300.0068252199999,530.26752,300.0068252199999,50,284.9532708999999,530.26752,284.9532708999999,80.01671999999996,263.7373551999998,536.270864,263.7373551999998,80.01671999999996,243.54100293999988,536.270864,243.54100293999988,50,237.0337892199998,335.15884000000005,237.0337892199998,50,221.9802348999999,335.15884000000005,221.9802348999999,80.01671999999996,200.76431919999982,545.27588,200.76431919999982,80.01671999999996,180.5679669399999,545.27588,180.5679669399999,50,174.0607532199998,485.24244,174.0607532199998,50,159.00719889999982,485.24244,159.00719889999982"><contents>声明变长数组（C99新增的特性）时，用变量表达式表示数组的维度，
用数组名访问数组的元素。具有这种特性的数组只能在自动内存中创建。
声明一个指针，调用malloc()，将其返回值赋给指针，使用指针访问数
组的元素。该指针可以是静态的或自动的。
使用第2种和第3种方法可以创建动态数组（dynamic array）。这种数组
和普通数组不同，可以在程序运行时选择数组的大小和分配内存。</contents></underline><underline page="641" rect="50,185.816,545.276,316.965" color="#E44234" flags="print" name="6af3cb24-548d-5ad4-30ec-99e4478458eb" title="Guest" subject="下划线" date="D:20231017104620+08'00'" creationdate="D:20231017104620+08'00'" coords="80.01671999999999,316.9645641999998,531.768356,316.9645641999998,80.01671999999999,296.7682119399999,531.768356,296.7682119399999,50,290.2609982199998,185.07524,290.2609982199998,50,275.20744389999993,185.07524,275.20744389999993,80.01671999999999,251.27769021999984,545.27588,251.27769021999984,80.01671999999999,236.22413589999985,545.27588,236.22413589999985,50,230.00180019999982,542.274208,230.00180019999982,50,209.8054479399999,542.274208,209.8054479399999,50,206.0120721999998,410.20064,206.0120721999998,50,185.8157199399999,410.20064,185.8157199399999"><contents>方括号（[]）表明candy、code和states都是数组，方括号中的数字表明
数组中的元素个数。
要访问数组中的元素，通过使用数组下标数（也称为索引）表示数组中
的各元素。数组元素的编号从0开始，所以candy[0]表示candy数组的第1个元
素，candy[364]表示第365个元素，也就是最后一个元素</contents></underline><underline page="642" rect="50,335.931,545.276,374.975" color="#E44234" flags="print" name="149c0bbf-f8d4-88bc-72f2-52c2f11d62ac" title="Guest" subject="下划线" date="D:20231017104819+08'00'" creationdate="D:20231017104819+08'00'" coords="155.05852000000004,374.97472521999987,545.27588,374.97472521999987,155.05852000000004,359.92117089999994,545.27588,359.92117089999994,50,350.98499721999985,410.20064,350.98499721999985,50,335.9314428999999,410.20064,335.9314428999999"><contents>用以逗号分隔的值列表（用花括号括起来）来初始化数组，
各值之间用逗号分隔。在逗号和值之间可以使用空格。</contents></underline><underline page="646" rect="50,723.336,545.276,791.511" color="#E44234" flags="print" name="0ac964b4-1146-544e-8652-a7d0adfd0a3f" title="Guest" subject="下划线" date="D:20231017104937+08'00'" creationdate="D:20231017104937+08'00'" coords="455.2257199999999,791.5113712,545.2758799999997,791.5113712,455.2257199999999,771.3150189400001,545.2758799999997,771.3150189400001,50,764.80780522,545.2758799999997,764.80780522,50,749.7542509,545.2758799999997,749.7542509,50,743.5319152,486.7432759999997,743.5319152,50,723.33556294,486.7432759999997,723.33556294"><contents>本章描述的数
组属于自动存储类别，意思是这些数组在函数内部声明，且声明时未使用关
键字static。到目前为止，本书所用的变量和数组都是自动存储类别</contents></underline><underline page="646" rect="305.142,573.400,395.192,593.596" color="#E44234" flags="print" name="9ac00775-060d-cd21-a557-f1a07f213956" title="Guest" subject="下划线" date="D:20231017105013+08'00'" creationdate="D:20231017105013+08'00'" coords="305.14212,593.5961152,395.19227999999976,593.5961152,305.14212,573.39976294,395.19227999999976,573.39976294"><contents>缺少两个元素</contents></underline><underline page="673" rect="50,543.413,256.035,719.542" color="#E44234" flags="print" name="ed2a140e-bafd-8024-ac63-0c544d52624d" title="Guest" subject="下划线" date="D:20231018183311+08'00'" creationdate="D:20231018183311+08'00'" coords="50,719.5421872000001,252.61285999999996,719.5421872000001,50,699.34583494,252.61285999999996,699.34583494,80.01671999999996,680.5588792,206.5071780799999,680.5588792,80.01671999999996,660.36252694,206.5071780799999,660.36252694,80.01671999999996,641.5755712,184.74505608000004,641.5755712,80.01671999999996,621.37921894,184.74505608000004,621.37921894,80.01671999999996,602.5922631999999,194.83067400000004,602.5922631999999,80.01671999999996,582.39591094,194.83067400000004,582.39591094,80.01671999999996,563.6089552,153.99738204687492,563.6089552,80.01671999999996,543.4126029399999,153.99738204687492,543.4126029399999,168.56604399999992,563.6089552,182.82398599999988,563.6089552,168.56604399999992,543.4126029399999,182.82398599999988,543.4126029399999,209.83903400000008,602.5922631999999,256.03476608000005,602.5922631999999,209.83903400000008,582.39591094,256.03476608000005,582.39591094,197.83234599999992,563.6089552,222.26595608000002,563.6089552,197.83234599999992,543.4126029399999,222.26595608000002,543.4126029399999"><contents>所以下面4种原型都是等价的：
int sum(int *ar, int n);
int sum(int *, int);
int sum(int ar[],
int sum(int [],
int n);
int);</contents></underline><underline page="673" rect="80.017,506.858,320.150,521.912" color="#E44234" flags="print" name="53087fbc-e424-bdd4-47ad-5e4ca771575c" title="Guest" subject="下划线" date="D:20231018183317+08'00'" creationdate="D:20231018183317+08'00'" coords="80.01671999999996,521.9118092199999,320.15048,521.9118092199999,80.01671999999996,506.85825489999996,320.15048,506.85825489999996"><contents>但是，在函数定义中不能省略参数名</contents></underline><underline page="677" rect="50,57.621,540.023,101.807" color="#E44234" flags="print" name="90d6c70c-aab7-2637-243e-3c6505148827" title="Guest" subject="下划线" date="D:20231018194514+08'00'" creationdate="D:20231018194514+08'00'" coords="419.95607400000017,101.80669119999982,540.022954,101.80669119999982,419.95607400000017,81.61033893999979,540.022954,81.61033893999979,50,77.8169631999998,260.1170400000001,77.8169631999998,50,57.62061093999978,260.1170400000001,57.62061093999978"><contents>指向数组后面第一
个位置的指针仍是有效的指针。</contents></underline><underline page="677" rect="50,81.610,542.274,149.786" color="#E44234" flags="print" name="8d13c20d-a214-9add-f1ab-9cc38afbafe3" title="Guest" subject="下划线" date="D:20231018194519+08'00'" creationdate="D:20231018194519+08'00'" coords="80.01672000000008,149.78614719999985,534.0196100000003,149.78614719999985,80.01672000000008,129.58979493999982,534.0196100000003,129.58979493999982,50,125.79641919999983,542.2742080000003,125.79641919999983,50,105.6000669399998,542.2742080000003,105.6000669399998,50,101.80669119999982,419.95607400000017,101.80669119999982,50,81.61033893999979,419.95607400000017,81.61033893999979"><contents>因为while循环的测试条件是一个不相等的关系，所以循环最后处理的
一个元素是end所指向位置的前一个元素。这意味着end指向的位置实际上在
数组最后一个元素的后面。C保证在给数组分配空间时，</contents></underline><underline page="678" rect="50,210.555,545.276,398.680" color="#E44234" flags="print" name="b6f45195-430e-261b-b99f-234d5750b3d0" title="Guest" subject="下划线" date="D:20231018194758+08'00'" creationdate="D:20231018194758+08'00'" coords="80.01672000000008,398.6795751999999,535.520446,398.6795751999999,80.01672000000008,378.4832229399999,535.520446,378.4832229399999,50,374.68984719999986,528.0162660000001,374.68984719999986,50,354.4934949399999,528.0162660000001,354.4934949399999,50,350.70011919999985,535.520446,350.70011919999985,50,330.5037669399999,535.520446,330.5037669399999,50,326.7103911999999,534.0196100000003,326.7103911999999,50,306.51403893999986,534.0196100000003,306.51403893999986,50,302.7206631999999,540.022954,302.7206631999999,50,282.52431093999985,540.022954,282.52431093999985,50,276.01709721999987,545.2758800000001,276.01709721999987,50,260.9635428999999,545.2758800000001,260.9635428999999,50,254.74120719999985,518.2608319999999,254.74120719999985,50,234.54485493999982,518.2608319999999,234.54485493999982,50,230.75147919999984,80.01672000000008,230.75147919999984,50,210.55512693999992,80.01672000000008,210.55512693999992"><contents>一元运算符*和++的优先级相同，但结合律是从右往左，所以start++先
求值，然后才是*start。也就是说，指针start先递增后指向。使用后缀形式
（即start++而不是++start）意味着先把指针指向位置上的值加到total上，然
后再递增指针。如果使用*++start，顺序则反过来，先递增指针，再使用指
针指向位置上的值。如果使用(*start)++，则先使用start指向的值，再递增该
值，而不是递增指针。这样，指针将一直指向同一个位置，但是该位置上的
值发生了变化。虽然*start++的写法比较常用，但是*(start++)这样写更清
楚。</contents></underline><underline page="684" rect="50,699.346,543.025,791.511" color="#E44234" flags="print" name="403088c8-40ed-47ae-4ca9-6f4a265363ea" title="Guest" subject="下划线" date="D:20231018195259+08'00'" creationdate="D:20231018195259+08'00'" coords="275.1254000000001,791.5113712,541.5237900000002,791.5113712,275.1254000000001,771.3150189400001,541.5237900000002,771.3150189400001,50,767.5216432,543.0246260000001,767.5216432,50,747.3252909400001,543.0246260000001,747.3252909400001,50,743.5319152,501.7516360000002,743.5319152,50,723.33556294,501.7516360000002,723.33556294,50,719.5421872000001,401.94604200000003,719.5421872000001,50,699.34583494,401.94604200000003,699.34583494"><contents>例如，用数组名、带地址运算符（&amp;）的
变量名、另一个指针进行赋值。在该例中，把urn数组的首地址赋给了ptr1，
该地址的编号恰好是0x7fff5fbff8d0。变量ptr2获得数组urn的第3个元素
（urn[2]）的地址。注意，地址应该和指针类型兼容。</contents></underline><underline page="684" rect="80.017,612.383,401.946,632.579" color="#E44234" flags="print" name="6a14992e-1f00-8327-1ce6-1f158c7a672e" title="Guest" subject="下划线" date="D:20231018195306+08'00'" creationdate="D:20231018195306+08'00'" coords="80.01672000000008,632.5794232,401.94604200000003,632.5794232,80.01672000000008,612.3830709399999,401.94604200000003,612.3830709399999"><contents>解引用：*运算符给出指针指向地址上储存的值。</contents></underline><underline page="684" rect="80.017,551.839,440.217,566.893" color="#E44234" flags="print" name="5404c749-c85d-e4d6-19ab-5d8d06434a0f" title="Guest" subject="下划线" date="D:20231018195326+08'00'" creationdate="D:20231018195326+08'00'" coords="80.01672000000008,566.89254922,440.2173600000001,566.89254922,80.01672000000008,551.8389949,440.2173600000001,551.8389949"><contents>取址：和所有变量一样，指针变量也有自己的地址和值</contents></underline><underline page="684" rect="50,416.897,538.522,458.654" color="#E44234" flags="print" name="4b721f15-3fbd-fde2-9937-35502747d50c" title="Guest" subject="下划线" date="D:20231018195500+08'00'" creationdate="D:20231018195500+08'00'" coords="80.01672000000008,458.65389519999997,538.5221180000001,458.65389519999997,80.01672000000008,438.45754293999994,538.5221180000001,438.45754293999994,50,431.9503292199999,440.2173600000001,431.9503292199999,50,416.8967748999999,440.2173600000001,416.8967748999999"><contents>指针与整数相加：可以使用+运算符把指针与整数相加，或整数与指针
相加。无论哪种情况，整数都会和指针所指向类型的大小（</contents></underline><underline page="685" rect="50,224.979,545.276,264.022" color="#E44234" flags="print" name="15c4586e-2d5b-33ac-7e38-a28bd39ed01f" title="Guest" subject="下划线" date="D:20231018195514+08'00'" creationdate="D:20231018195514+08'00'" coords="80.01671999999985,264.02223321999986,545.2758800000001,264.02223321999986,80.01671999999985,248.96867889999987,545.2758800000001,248.96867889999987,50,240.03250521999985,440.2173600000001,240.03250521999985,50,224.97895089999986,440.2173600000001,224.97895089999986"><contents>指针求差：可以计算两个指针的差值。通常，求差的两个指针分别指向
同一个数组的不同元素，通过计算求出两元素之间的距离。</contents></underline><underline page="685" rect="50,174.571,545.276,218.757" color="#E44234" flags="print" name="76d1306f-d3e7-6d8c-2133-64d46ed990e0" title="Guest" subject="下划线" date="D:20231018195520+08'00'" creationdate="D:20231018195520+08'00'" coords="383.9360099999999,218.75661519999983,545.2758800000001,218.75661519999983,383.9360099999999,198.56026293999992,545.2758800000001,198.56026293999992,50,194.76688719999981,417.7048199999999,194.76688719999981,50,174.5705349399999,417.7048199999999,174.5705349399999"><contents>，ptr2 - ptr1得2，意思是
这两个指针所指向的两个元素相隔两个int，而不是2字节</contents></underline><underline page="685" rect="80.017,66.047,545.276,81.101" color="#E44234" flags="print" name="7d872a68-5070-801d-8482-62337d3585a7" title="Guest" subject="下划线" date="D:20231018195531+08'00'" creationdate="D:20231018195531+08'00'" coords="80.01671999999985,81.10055721999981,545.2758800000001,81.10055721999981,80.01671999999985,66.04700289999971,545.2758800000001,66.04700289999971"><contents>比较：使用关系运算符可以比较两个指针的值，前提是两个指针都指向</contents></underline><underline page="686" rect="50,773.744,170.067,788.798" color="#E44234" flags="print" name="df7c44be-0915-54f7-8e13-ab36ea4feb1e" title="Guest" subject="下划线" date="D:20231018195535+08'00'" creationdate="D:20231018195535+08'00'" coords="50,788.79753322,170.06687999999986,788.79753322,50,773.7439789,170.06687999999986,773.7439789"><contents>相同类型的对象。</contents></underline><underline page="688" rect="50,674.037,545.276,739.784" color="#E44234" flags="print" name="b6d8ba54-cfe5-d9e9-ee18-b76ed1762d56" title="Guest" subject="下划线" date="D:20231018195648+08'00'" creationdate="D:20231018195648+08'00'" coords="380.18391999999994,739.7835202,545.27588,739.7835202,380.18391999999994,719.58716794,545.27588,719.58716794,50,715.7937922,545.27588,715.7937922,50,695.59743994,545.27588,695.59743994,50,689.09022622,245.10868000000005,689.09022622,50,674.0366719,245.10868000000005,674.0366719"><contents>要选择是传递int类型的值
还是传递指向int的指针。通常都是直接传递数值，只有程序需要在函数中改
变该数值时，才会传递指针。</contents></underline><underline page="688" rect="50,602.067,545.276,665.100" color="#E44234" flags="print" name="0be0dfa5-c0d3-cb91-b4f8-0ae4a8abbc57" title="Guest" subject="下划线" date="D:20231018195705+08'00'" creationdate="D:20231018195705+08'00'" coords="155.05852,665.10049822,545.27588,665.10049822,155.05852,650.0469439,545.27588,650.0469439,50,641.11077022,545.27588,641.11077022,50,626.0572159,545.27588,626.0572159,50,617.1210422199999,365.17556,617.1210422199999,50,602.0674879,365.17556,602.0674879"><contents>一个函数按值传递数组，则必须分配足够的空间来储存原数
组的副本，然后把原数组所有的数据拷贝至新的数组中。如果把数组的地址
传递给函数，让函数直接处理原数组则效率要高</contents></underline><underline page="688" rect="50,92.286,545.276,131.329" color="#E44234" flags="print" name="1b6f987f-f867-60bf-6a7b-8c15e797d129" title="Guest" subject="下划线" date="D:20231018195930+08'00'" creationdate="D:20231018195930+08'00'" coords="80.01671999999999,131.32905021999977,545.27588,131.32905021999977,80.01671999999999,116.2754958999999,545.27588,116.2754958999999,50,107.33932221999976,200.08360000000002,107.33932221999976,50,92.28576789999988,200.08360000000002,92.28576789999988"><contents>该函数修改了数组中的数据。之所以可以这样做，是因为函数通过指针
直接使用了原始数据。</contents></underline><underline page="700" rect="50,447.454,545.276,719.542" color="#E44234" flags="print" name="8e0dd261-9f61-8ca9-4262-0baf59651d8b" title="Guest" subject="下划线" date="D:20231018200351+08'00'" creationdate="D:20231018200351+08'00'" coords="155.05852000000004,719.5421872000001,543.775044,719.5421872000001,155.05852000000004,699.34583494,543.775044,699.34583494,50,695.5524592,260.1170400000001,695.5524592,50,675.35610694,260.1170400000001,675.35610694,80.01671999999985,656.5691512,155.47875407999982,656.5691512,80.01671999999985,636.3727989399999,155.47875407999982,636.3727989399999,185.07524000000012,656.5691512,436.46527000000015,656.5691512,185.07524000000012,636.3727989399999,436.46527000000015,636.3727989399999,80.01671999999985,617.5858432,543.775044,617.5858432,80.01671999999985,597.38949094,543.775044,597.38949094,50,593.5961152,532.5187740000001,593.5961152,50,573.39976294,532.5187740000001,573.39976294,80.01671999999985,554.6128071999999,157.73000808000006,554.6128071999999,80.01671999999985,534.41645494,157.73000808000006,534.41645494,193.70504699999992,554.6128071999999,545.2758800000001,554.6128071999999,193.70504699999992,534.41645494,545.2758800000001,534.41645494,50,530.6230791999999,125.04179999999997,530.6230791999999,50,510.42672694,125.04179999999997,510.42672694,80.01671999999985,491.6397711999999,522.76334,491.6397711999999,80.01671999999985,471.44341893999996,522.76334,471.44341893999996,50,467.6500431999999,302.8908660000002,467.6500431999999,50,447.45369093999994,302.8908660000002,447.45369093999994"><contents>因此，pz必须指向一个内含两个int类型值的数组，而不是指
向一个int类型值，其声明如下：
int (* pz)[2];
// pz指向一个内含两个int类型值的数组
以上代码把pz声明为指向一个数组的指针，该数组内含两个int类型值。
为什么要在声明中使用圆括号？因为[]的优先级高于*。考虑下面的声明：
int * pax[2];
// pax是一个内含两个指针元素的数组，每个元素都指
向int的指针
由于[]优先级高，先与pax结合，所以pax成为一个内含两个元素的数
组。然后*表示pax数组内含两个指针。</contents></underline><underline page="917" rect="50,139.516,545.276,181.273" color="#E44234" flags="print" name="d7910827-2d9a-dfc2-060a-5f3df6490cec" title="Guest" subject="下划线" date="D:20231019214250+08'00'" creationdate="D:20231019214250+08'00'" coords="80.01672000000008,181.27266519999978,545.2758800000001,181.27266519999978,80.01672000000008,161.07631293999987,545.2758800000001,161.07631293999987,50,154.56909921999977,275.1253999999999,154.56909921999977,50,139.5155448999999,275.1253999999999,139.5155448999999"><contents>变长数组（VLA）和调用 malloc()在功能上有些重合。例如，两者都可
用于创建在运行时确定大小的数组</contents></underline><underline page="918" rect="50,411.469,545.276,476.931" color="#E44234" flags="print" name="9f07f729-8cfe-f347-bebc-22d6bc2b844d" title="Guest" subject="下划线" date="D:20231019214354+08'00'" creationdate="D:20231019214354+08'00'" coords="155.0585199999996,476.9310692199999,545.2758800000001,476.9310692199999,155.0585199999996,461.87751489999994,545.2758800000001,461.87751489999994,50,455.6551791999999,536.2708640000001,455.6551791999999,50,435.45882693999994,536.2708640000001,435.45882693999994,50,431.6654511999999,269.12205600000016,431.6654511999999,50,411.4690989399999,269.12205600000016,411.4690989399999"><contents>变长数组是自动存储类型。因此，程序在离开变长数组定义
所在的块时（该例中，即vlamal()函数结束时），变长数组占用的内存空间
会被自动释放，不必使用 free()。</contents></underline><underline page="918" rect="50,317.939,545.276,431.665" color="#E44234" flags="print" name="d7a9517f-ce78-2bca-122e-dca077508f7c" title="Guest" subject="下划线" date="D:20231019214420+08'00'" creationdate="D:20231019214420+08'00'" coords="269.12205600000016,431.6654511999999,545.2758800000001,431.6654511999999,269.12205600000016,411.4690989399999,545.2758800000001,411.4690989399999,50,404.9618852199999,530.2675199999994,404.9618852199999,50,389.90833089999995,530.2675199999994,389.90833089999995,50,383.68599519999987,534.0196099999994,383.68599519999987,50,363.4896429399999,534.0196099999994,363.4896429399999,50,359.69626719999985,545.2758800000001,359.69626719999985,50,339.4999149399999,545.2758800000001,339.4999149399999,50,332.99270121999984,275.1253999999999,332.99270121999984,50,317.93914689999986,275.1253999999999,317.93914689999986"><contents>另一方面，用malloc()创建的数组不必局限
在一个函数内访问。例如，可以这样做：被调函数创建一个数组并返回指
针，供主调函数访问，然后主调函数在末尾调用free()释放之前被调函数分
配的内存。另外，free()所用的指针变量可以与 malloc()的指针变量不同，但
是两个指针必须储存相同的地址。</contents></underline><underline page="919" rect="110.033,489.436,342.663,509.632" color="#E44234" flags="print" name="c141d0c6-ef9a-59ee-3965-20f94aaaadf8" title="Guest" subject="下划线" date="D:20231019214559+08'00'" creationdate="D:20231019214559+08'00'" coords="110.03343999999925,509.63206719999994,342.66301999999996,509.63206719999994,110.03343999999925,489.43571493999997,342.66301999999996,489.43571493999997"><contents>p2指向一个内含6个int类型值的数组</contents></underline><underline page="918" rect="80.017,72.614,152.552,92.811" color="#E44234" flags="print" name="7105c83b-97cd-7065-bfc1-c5f0125c8222" title="Guest" subject="下划线" date="D:20231019220912+08'00'" creationdate="D:20231019220912+08'00'" coords="80.01671999999962,92.81054319999976,152.55212387999927,92.81054319999976,80.01671999999962,72.61419093999973,152.55212387999927,72.61419093999973"><contents>int (* p2)[6]</contents></underline><text page="918" rect="80.017,61.811,111.017,92.811" color="#FFFF00" flags="print,nozoom,norotate" inreplyto="7105c83b-97cd-7065-bfc1-c5f0125c8222" name="74fcab38-4a5b-cc9c-43ea-4b2c0df1bb11" title="Guest" subject="注释" date="D:20231019221300+08'00'" creationdate="D:20231019221300+08'00'" icon="Comment" statemodel="Review"><trn-custom-data bytes="{&quot;trn-mention&quot;:&quot;{\&quot;contents\&quot;:\&quot;这行代码定义了一个名为p2的指针，该指针指向一个包含6个int类型元素的数组。所以，p2 是一个指向整数数组的指针。p2 是一个指向整个数组的指针，而不是指向数组的第一个元素的指针。要指向数组的第一个元素，你需要使用 * 运算符来解引用 p2。\\n\\n例如，如果你有一个包含6个int类型元素的数组，p2 指向整个数组\&quot;,\&quot;ids\&quot;:[]}&quot;}"/><contents>这行代码定义了一个名为p2的指针，该指针指向一个包含6个int类型元素的数组。所以，p2 是一个指向整数数组的指针。p2 是一个指向整个数组的指针，而不是指向数组的第一个元素的指针。要指向数组的第一个元素，你需要使用 * 运算符来解引用 p2。

例如，如果你有一个包含6个int类型元素的数组，p2 指向整个数组</contents></text><squiggly page="923" rect="50,695.597,326.904,715.794" color="#E44234" flags="print" name="711572ee-7a74-8eac-95ad-34eee99abf86" title="Guest" subject="曲线" date="D:20231023163830+08'00'" creationdate="D:20231023163830+08'00'" coords="50,715.7937922,326.904242,715.7937922,50,695.59743994,326.904242,695.59743994"><contents>恒常性（constancy）和易变性（volatility）</contents></squiggly><underline page="923" rect="302.140,647.618,509.256,667.814" color="#E44234" flags="print" name="853bec19-9810-73b4-922d-52140801dd9b" title="Guest" subject="下划线" date="D:20231023163902+08'00'" creationdate="D:20231023163902+08'00'" coords="302.140448,667.8143362,509.25581600000004,667.8143362,302.140448,647.6179839399999,509.25581600000004,647.6179839399999"><contents>restrict，用于提高编译器优化。</contents></underline><underline page="923" rect="50,599.639,530.268,643.825" color="#E44234" flags="print" name="6b2f308d-43f5-c607-dac0-4f58ed81bdf7" title="Guest" subject="下划线" date="D:20231023163910+08'00'" creationdate="D:20231023163910+08'00'" coords="125.04180000000001,643.8246082000001,530.26752,643.8246082000001,125.04180000000001,623.6282559399999,530.26752,623.6282559399999,50,619.8348802,416.203984,619.8348802,50,599.63852794,416.203984,599.63852794"><contents>第4个限定符：_Atomic。C11提供一个可选库，由stdatomic.h管
理，以支持并发程序设计，而且_Atomic是可选支持项。</contents></underline><underline page="923" rect="50,536.665,545.276,578.138" color="#E44234" flags="print" name="1686c0d2-9f9b-8dc3-0496-0f0381a1daf2" title="Guest" subject="下划线" date="D:20231023163919+08'00'" creationdate="D:20231023163919+08'00'" coords="425.209,578.13773422,545.27588,578.13773422,425.209,563.0841799,545.27588,563.0841799,50,556.8618442,160.311446,556.8618442,50,536.66549194,160.311446,536.66549194"><contents>它们现在是幂等的
（idempotent）！</contents></underline><underline page="923" rect="50,515.105,535.520,556.862" color="#E44234" flags="print" name="4d76c755-3a50-fe4f-03fe-ed17851601bb" title="Guest" subject="下划线" date="D:20231023163930+08'00'" creationdate="D:20231023163930+08'00'" coords="325.403406,556.8618442,535.520446,556.8618442,325.403406,536.66549194,535.520446,536.66549194,50,530.1582782199999,350.16720000000004,530.1582782199999,50,515.1047239,350.16720000000004,515.1047239"><contents>其实意思是可以在一条声明中多
次使用同一个限定符，多余的限定符将被忽略</contents></underline><underline page="923" rect="333.283,314.820,386.562,338.321" color="#E44234" flags="print" name="789c5f68-e058-1af1-223e-3bbb4013b678" title="Guest" subject="下划线" date="D:20231023164141+08'00'" creationdate="D:20231023164141+08'00'" coords="333.282795,338.3214195519999,386.562473,338.3214195519999,333.282795,314.8197325809998,386.562473,314.8197325809998"><contents>限定符</contents></underline><underline page="924" rect="80.017,771.315,299.889,791.511" color="#E44234" flags="print" name="52d29e0c-0451-3eb0-1fc8-a2efbfb41b99" title="Guest" subject="下划线" date="D:20231023164218+08'00'" creationdate="D:20231023164218+08'00'" coords="80.01671999999996,791.5113712,299.889194,791.5113712,80.01671999999996,771.3150189400001,299.889194,771.3150189400001"><contents>该声明让nochange成为只读变量。</contents></underline><underline page="924" rect="50,465.446,545.276,509.632" color="#E44234" flags="print" name="e7190357-d0a0-85ef-edfa-4de664f05d8c" title="Guest" subject="下划线" date="D:20231023164349+08'00'" creationdate="D:20231023164349+08'00'" coords="130.4823305,509.63206719999994,545.27588,509.63206719999994,130.4823305,489.43571493999997,545.27588,489.43571493999997,50,485.6423391999999,249.61118799999997,485.6423391999999,50,465.44598693999995,249.61118799999997,465.44598693999995"><contents>pf 指向的值不能被改变，而 pt 本身的值可以改变。例如，可以
设置该指针指向其他 const值。</contents></underline><underline page="924" rect="80.017,207.556,338.161,266.736" color="#E44234" flags="print" name="ed5dd917-4bcc-cec6-1de4-ac2541e12170" title="Guest" subject="下划线" date="D:20231023164517+08'00'" creationdate="D:20231023164517+08'00'" coords="80.01671999999996,266.73607119999986,283.379998,266.73607119999986,80.01671999999996,246.53971893999983,283.379998,246.53971893999983,80.01671999999996,227.7527631999999,338.16051200000004,227.7527631999999,80.01671999999996,207.55641093999986,338.16051200000004,207.55641093999986"><contents>还可以把const放在第3个位置：
float const * pfc; // 与const float * pfc;相同</contents></underline><underline page="924" rect="260.117,81.610,410.201,101.807" color="#E44234" flags="print" name="127476b8-7621-8c51-9d6b-7e02ba2d26ec" title="Guest" subject="下划线" date="D:20231023164528+08'00'" creationdate="D:20231023164528+08'00'" coords="260.11704,101.80669119999982,410.20064,101.80669119999982,260.11704,81.61033893999979,410.20064,81.61033893999979"><contents>声明为函数形参的指针</contents></underline><underline page="925" rect="50,749.754,545.276,788.798" color="#E44234" flags="print" name="cc7c42d7-14e8-34ad-4073-4ad01490c1bd" title="Guest" subject="下划线" date="D:20231023164704+08'00'" creationdate="D:20231023164704+08'00'" coords="275.1253999999999,788.79753322,545.2758799999999,788.79753322,275.1253999999999,773.7439789,545.2758799999999,773.7439789,50,764.80780522,290.13375999999994,764.80780522,50,749.7542509,290.13375999999994,749.7542509"><contents>该函数可能会更改主调函数中的数据，但
是下面的原型保证了数据不会被更改</contents></underline><underline page="925" rect="50,645.369,545.264,689.555" color="#E44234" flags="print" name="d10558b1-db52-f10c-52a7-9c1901cb7254" title="Guest" subject="下划线" date="D:20231023165829+08'00'" creationdate="D:20231023165829+08'00'" coords="230.10032,689.5550272,545.263873312,689.5550272,230.10032,669.35867494,545.263873312,669.35867494,50,665.5652992,320.9008980000001,665.5652992,50,645.36894694,320.9008980000001,645.36894694"><contents>形参声明const int array[]与const int * array相同，
所以该声明表明不能更改array指向的数据</contents></underline><underline page="925" rect="80.017,519.423,403.117,539.619" color="#80E5B1" flags="print" name="a6a5a0d7-1206-672e-630d-a7eaeb8f3a36" title="Guest" subject="下划线" date="D:20231023170105+08'00'" creationdate="D:20231023170104+08'00'" coords="80.01671999999996,539.6192272,403.1166940799999,539.6192272,80.01671999999996,519.4228749399999,403.1166940799999,519.4228749399999"><contents>char *strcat(char * restrict s1, const char * restrict s2);</contents></underline><underline page="925" rect="50,282.524,545.716,326.710" color="#E44234" flags="print" name="c8be24c0-56f6-216d-aa33-50a848370883" title="Guest" subject="下划线" date="D:20231023170311+08'00'" creationdate="D:20231023170307+08'00'" coords="146.42871300000002,326.7103911999999,545.715578046875,326.7103911999999,146.42871300000002,306.51403893999986,545.715578046875,306.51403893999986,50,302.7206631999999,470.98449800000003,302.7206631999999,50,282.52431093999985,470.98449800000003,282.52431093999985"><contents>const 限定符声明全局数据很合理。可以创建const变量、const
数组和const结构（结构是一种复合数据类型，将在下一章介绍）</contents></underline><underline page="926" rect="80.017,513.425,344.618,533.622" color="#E44234" flags="print" name="c77486e8-21cd-6b03-7baf-a3320b90cce7" title="Guest" subject="下划线" date="D:20231023170442+08'00'" creationdate="D:20231023170442+08'00'" coords="80.01672000000008,533.6217952,344.6182106484375,533.6217952,80.01672000000008,513.42544294,344.6182106484375,513.42544294"><contents>/* constant.h --定义了一些外部const变量*/</contents></underline><underline page="926" rect="50,90.606,532.519,158.782" color="#E44234" flags="print" name="15549e2f-2d91-b83e-da9f-eb576b5d3c3b" title="Guest" subject="下划线" date="D:20231023170507+08'00'" creationdate="D:20231023170507+08'00'" coords="245.10868000000005,158.7822951999998,532.5187740000001,158.7822951999998,245.10868000000005,138.58594293999988,532.5187740000001,138.58594293999988,50,134.79256719999978,531.768356,134.79256719999978,50,114.59621493999987,531.768356,114.59621493999987,50,110.80283919999977,200.08360000000016,110.80283919999977,50,90.60648693999985,200.08360000000016,90.60648693999985"><contents>用关键字static声明全局const变量。如果去掉
static，那么在file1.c和file2.c中包含constant.h将导致每个文件中都有一个相
同标识符的定义式声明</contents></underline><underline page="926" rect="215.092,90.606,525.015,110.803" color="#E44234" flags="print" name="cc74d433-2d2f-6079-e555-94867d59926a" title="Guest" subject="下划线" date="D:20231023170559+08'00'" creationdate="D:20231023170559+08'00'" coords="215.0919600000002,110.80283919999977,525.0145940000002,110.80283919999977,215.0919600000002,90.60648693999985,525.0145940000002,90.60648693999985"><contents>C标准不允许这样做（然而，有些编译器允许）</contents></underline><underline page="926" rect="146.054,177.569,216.713,197.766" color="#E44234" flags="print" name="ad207208-a6d6-7344-7296-f336c25d4ee2" title="Guest" subject="下划线" date="D:20231023170611+08'00'" creationdate="D:20231023170611+08'00'" coords="146.05350399999998,197.76560319999987,216.71286287999988,197.76560319999987,146.05350399999998,177.56925093999985,216.71286287999988,177.56925093999985"><contents>"constant.h"</contents></underline><text page="926" rect="146.054,166.766,177.054,197.766" color="#FFFF00" flags="print,nozoom,norotate" inreplyto="ad207208-a6d6-7344-7296-f336c25d4ee2" name="21660bd0-069a-3998-4528-98ec1b519b1c" title="Guest" subject="注释" date="D:20231023170649+08'00'" creationdate="D:20231023170649+08'00'" icon="Comment" statemodel="Review"><trn-custom-data bytes="{&quot;trn-mention&quot;:&quot;{\&quot;contents\&quot;:\&quot;头文件相当于把头文件中的内容写出一个使用头文件的文件\&quot;,\&quot;ids\&quot;:[]}&quot;}"/><contents>头文件相当于把头文件中的内容写出一个使用头文件的文件</contents></text><underline page="927" rect="50,638.802,545.276,701.835" color="#E44234" flags="print" name="d8fc5825-6ecc-9627-2f83-ffc605063ac4" title="Guest" subject="下划线" date="D:20231023170705+08'00'" creationdate="D:20231023170705+08'00'" coords="80.01671999999985,701.83476922,545.2758800000001,701.83476922,80.01671999999985,686.7812149,545.2758800000001,686.7812149,50,677.84504122,545.2758800000001,677.84504122,50,662.7914869,545.2758800000001,662.7914869,50,653.85531322,320.1504799999998,653.85531322,50,638.8017589,320.1504799999998,638.8017589"><contents>头文件方案的好处是，方便你偷懒，不用惦记着在一个文件中使用定义
式声明，在其他文件中使用引用式声明。所有的文件都只需包含同一个头文
件即可。但它的缺点是，数据是重复的。</contents></underline><underline page="927" rect="50,509.857,545.276,551.614" color="#E44234" flags="print" name="a5565d83-ca4b-4cf1-4ba7-cc3e6bc7d3fb" title="Guest" subject="下划线" date="D:20231023170746+08'00'" creationdate="D:20231023170746+08'00'" coords="275.1253999999999,551.6140912,545.2758800000001,551.6140912,275.1253999999999,531.4177389399999,545.2758800000001,531.4177389399999,50,524.91052522,140.05015999999978,524.91052522,50,509.85697089999996,140.05015999999978,509.85697089999996"><contents>代理（而不是变量所在的程序）可以改变
该变量的值。</contents></underline><underline page="928" rect="50,699.346,545.276,791.511" color="#E44234" flags="print" name="4c4384f6-0f83-e0f2-ad9a-3794e0f4c9bd" title="Guest" subject="下划线" date="D:20231023170852+08'00'" creationdate="D:20231023170852+08'00'" coords="80.01671999999962,791.5113712,545.2758799999997,791.5113712,80.01671999999962,771.3150189400001,545.2758799999997,771.3150189400001,50,767.5216432,545.2758799999997,767.5216432,50,747.3252909400001,545.2758799999997,747.3252909400001,50,743.5319152,528.7666839999997,743.5319152,50,723.33556294,528.7666839999997,723.33556294,50,719.5421872000001,335.15884000000005,719.5421872000001,50,699.34583494,335.15884000000005,699.34583494"><contents>智能的（进行优化的）编译器会注意到以上代码使用了两次 x，但并未
改变它的值。于是编译器把 x的值临时储存在寄存器中，然后在val2需要使
用x时，才从寄存器中（而不是从原始内存位置上）读取x的值，以节约时
间。这个过程被称为高速缓存（caching）。</contents></underline><underline page="928" rect="50,627.377,516.010,671.563" color="#E44234" flags="print" name="0c34fa59-4ccd-bfa5-bfaf-623e26f764ac" title="Guest" subject="下划线" date="D:20231023171016+08'00'" creationdate="D:20231023171016+08'00'" coords="125.04179999999997,671.5627312,516.0095779999997,671.5627312,125.04179999999997,651.36637894,516.0095779999997,651.36637894,50,647.5730032,395.19227999999976,647.5730032,50,627.37665094,395.19227999999976,627.37665094"><contents>如果没有volatile关键字，编译器就不知道这种事情是否会发
生。因此，为安全起见，编译器不会进行高速缓存。</contents></underline><underline page="928" rect="50,494.863,545.276,536.621" color="#E44234" flags="print" name="081a0c32-51b9-2c47-a4b4-c359c57c062c" title="Guest" subject="下划线" date="D:20231023171102+08'00'" creationdate="D:20231023171102+08'00'" coords="530.2675199999999,536.6205112,545.2758799999997,536.6205112,530.2675199999999,516.42415894,545.2758799999997,516.42415894,50,509.91694521999995,410.20064,509.91694521999995,50,494.86339089999996,410.20064,494.86339089999996"><contents>只
能在声明中同时使用这两个限定符，它们的顺序不重要</contents></underline><underline page="930" rect="80.017,320.938,170.067,335.991" color="#E44234" flags="print" name="86b90340-8a65-e11f-4f89-d91d959bfc49" title="Guest" subject="下划线" date="D:20231023171945+08'00'" creationdate="D:20231023171945+08'00'" coords="80.01672000000008,335.99141721999985,170.06687999999986,335.99141721999985,80.01672000000008,320.9378628999999,170.06687999999986,320.9378628999999"><contents>并发程序设计</contents></underline><underline page="1008" rect="137.799,615.382,240.276,635.578" color="#E44234" flags="print" name="0a44c71a-1355-cf3e-267a-7adb7e85f20c" title="Guest" subject="下划线" date="D:20231023180129+08'00'" creationdate="D:20231023180129+08'00'" coords="137.798906,635.5781392,240.27598807999993,635.5781392,137.798906,615.38178694,240.27598807999993,615.38178694"><contents>fgets(st, n, stdin);</contents></underline><underline page="1008" rect="260.117,147.582,405.443,167.778" color="#E44234" flags="print" name="d35073ef-3cc8-b1ab-9b43-9ca050dbda61" title="Guest" subject="下划线" date="D:20231023180145+08'00'" creationdate="D:20231023180145+08'00'" coords="260.1170400000001,167.77844319999986,405.44298988000014,167.77844319999986,260.1170400000001,147.58209093999983,405.44298988000014,147.58209093999983"><contents>s_gets()函数去掉fgets()</contents></underline><underline page="1006" rect="80.017,401.723,245.109,422.160" color="#E44234" flags="print" name="1826b7fd-bb9d-2b83-ec52-ed9df7641528" title="Guest" subject="下划线" date="D:20231023180204+08'00'" creationdate="D:20231023180204+08'00'" coords="80.01671999999999,422.1595214799999,245.10868000000002,422.1595214799999,80.01671999999999,401.7232719399999,245.10868000000002,401.7232719399999"><contents>程序清单14.1 book.c程序</contents></underline><underline page="946" rect="110.033,463.197,334.408,483.393" color="#E44234" flags="print" name="bb7544a0-18fe-e2af-e03d-567338da1ceb" title="Guest" subject="下划线" date="D:20231025082658+08'00'" creationdate="D:20231025082658+08'00'" coords="110.03344,483.39330219999994,334.40842200000003,483.39330219999994,110.03344,463.19694993999997,334.40842200000003,463.19694993999997"><contents>使用C标准I/O系列的函数处理文件</contents></underline><underline page="946" rect="80.017,387.659,490.075,444.410" color="#E44234" flags="print" name="8aac3458-faf8-626c-634f-09edb47a4c26" title="Guest" subject="下划线" date="D:20231025082835+08'00'" creationdate="D:20231025082835+08'00'" coords="80.01671999999999,444.4099941999999,490.07513192000005,444.4099941999999,80.01671999999999,424.21364193999995,490.07513192000005,424.21364193999995,80.01671999999999,402.7128482199999,425.209,402.7128482199999,80.01671999999999,387.6592938999999,425.209,387.6592938999999"><contents>文件模式和二进制模式、文本和二进制格式、缓冲和无缓冲I/O
使用既可以顺序访问文件也可以随机访问文件的函数</contents></underline><underline page="947" rect="50,695.597,545.276,737.070" color="#E44234" flags="print" name="94d170aa-01bd-9739-20a7-fa50c8454865" title="Guest" subject="下划线" date="D:20231025082902+08'00'" creationdate="D:20231025082902+08'00'" coords="125.04180000000001,737.06968222,545.27588,737.06968222,125.04180000000001,722.0161279,545.27588,722.0161279,50,715.7937922,357.67138,715.7937922,50,695.59743994,357.67138,695.59743994"><contents>需要程序从文件中读取信息或把信息写入文件。这种程序与文件
交互的形式就是文件重定向（第8章介绍过）。</contents></underline><underline page="947" rect="50,353.744,535.520,397.930" color="#E44234" flags="print" name="885a9bb4-679d-a6df-56dc-b24af34b546d" title="Guest" subject="下划线" date="D:20231025083846+08'00'" creationdate="D:20231025083846+08'00'" coords="80.01671999999999,397.92989619999986,535.520446,397.92989619999986,80.01671999999999,377.73354393999995,535.520446,377.73354393999995,50,373.94016819999985,510.006234,373.94016819999985,50,353.74381593999993,510.006234,353.74381593999993"><contents>文件（file）通常是在磁盘或固态硬盘上的一段已命名的存储区。对我
们而言，stdio.h就是一个文件的名称，该文件中包含一些有用的信息。</contents></underline><underline page="947" rect="50,260.214,545.276,323.247" color="#E44234" flags="print" name="81c30724-5b02-299a-a727-a8474201a129" title="Guest" subject="下划线" date="D:20231025083859+08'00'" creationdate="D:20231025083859+08'00'" coords="470.23408,323.2468742199999,545.27588,323.2468742199999,470.23408,308.1933198999999,545.27588,308.1933198999999,50,301.97098419999986,540.022954,301.97098419999986,50,281.77463193999995,540.022954,281.77463193999995,50,275.26741821999985,110.03344,275.26741821999985,50,260.21386389999986,110.03344,260.21386389999986"><contents>这都是操作
系统所关心的，程序员关心的是C程序如何处理文件（除非你正在编写操作
系统）。</contents></underline><underline page="947" rect="50,194.812,525.015,238.998" color="#E44234" flags="print" name="5079dde5-9ee8-0e44-cf77-e521890f83f0" title="Guest" subject="下划线" date="D:20231025083937+08'00'" creationdate="D:20231025083937+08'00'" coords="80.01671999999999,238.99794819999988,525.014594,238.99794819999988,80.01671999999999,218.80159593999986,525.014594,218.80159593999986,50,215.00822019999987,365.17556,215.00822019999987,50,194.81186793999984,365.17556,194.81186793999984"><contents>C把文件看作是一系列连续的字节，每个字节都能被单独读取。这与
UNIX环境中（C的发源地）的文件结构相对应。</contents></underline><underline page="947" rect="50,68.296,530.268,107.339" color="#E44234" flags="print" name="fe602c3a-a950-1884-70e4-63c0587aaa32" title="Guest" subject="下划线" date="D:20231025084733+08'00'" creationdate="D:20231025084733+08'00'" coords="170.06688,107.33932221999976,530.26752,107.33932221999976,170.06688,92.28576789999988,530.26752,92.28576789999988,50,83.34959421999974,305.14212,83.34959421999974,50,68.29603989999976,305.14212,68.29603989999976"><contents>文本内容和二进制内容、文本文件格式和二进制文件格
式，以及文件的文本模式和二进制模式</contents></underline><underline page="948" rect="50,725.765,545.276,791.511" color="#E44234" flags="print" name="836045ce-0f3e-7a1d-1f98-4a1745ee1971" title="Guest" subject="下划线" date="D:20231025084751+08'00'" creationdate="D:20231025084751+08'00'" coords="440.21736,791.5113712,545.27588,791.5113712,440.21736,771.3150189400001,545.27588,771.3150189400001,50,767.5216432,545.27588,767.5216432,50,747.3252909400001,545.27588,747.3252909400001,50,740.8180772200001,395.19228,740.8180772200001,50,725.7645229,395.19228,725.7645229"><contents>如果文件最初使
用二进制编码的字符（例如， ASCII或Unicode）表示文本（就像C字符串那
样），该文件就是文本文件，其中包含文本内容。如</contents></underline><underline page="948" rect="50,213.554,545.276,329.709" color="#E44234" flags="print" name="d6065788-848d-e38b-9f33-6463c78753c4" title="Guest" subject="下划线" date="D:20231025085010+08'00'" creationdate="D:20231025085010+08'00'" coords="260.11704,329.70910719999983,545.27588,329.70910719999983,260.11704,309.5127549399999,545.27588,309.5127549399999,50,303.0055412199998,545.27588,303.0055412199998,50,287.95198689999995,545.27588,287.95198689999995,50,279.0158132199998,545.27588,279.0158132199998,50,263.96225889999994,545.27588,263.96225889999994,50,257.7399231999998,519.761668,257.7399231999998,50,237.54357093999988,519.761668,237.54357093999988,50,233.75019519999978,431.962762,233.75019519999978,50,213.55384293999987,431.962762,213.55384293999987"><contents>C 提供两种访问文件的途径：二进制模式和
文本模式。在二进制模式中，程序可以访问文件的每个字节。而在文本模式
中，程序所见的内容和文件的实际内容不同。程序以文本模式读取文件时，
把本地环境表示的行末尾或文件结尾映射为C模式。例如，C程序在旧式
Macintosh中以文本模式读取文件时，把文件中的\r转换成\n</contents></underline><underline page="748" rect="50,495.433,545.276,575.889" color="#E44234" flags="print" name="5b379548-c856-fd45-9020-ab1f1eea5026" title="Guest" subject="下划线" date="D:20231028161636+08'00'" creationdate="D:20231028161636+08'00'" coords="320.15047999999933,575.88869722,545.2758799999992,575.88869722,320.15047999999933,560.8351428999999,545.2758799999992,560.8351428999999,50,554.6128071999999,200.83401799999956,554.6128071999999,50,534.41645494,200.83401799999956,534.41645494,80.01671999999962,515.6294991999999,245.5289140799996,515.6294991999999,80.01671999999962,495.43314694,245.5289140799996,495.43314694,263.86912999999913,515.6294991999999,336.6596759999993,515.6294991999999,263.86912999999913,495.43314694,336.6596759999993,495.43314694"><contents>建议在把指针初始化为字符串字面
量时使用const限定符：
const char * pl = "Klingon";
// 推荐用法</contents></underline><underline page="748" rect="87.521,354.493,169.316,374.930" color="#E44234" flags="print" name="c31c2f97-25cd-dfb4-d586-ac49258dbf7e" title="Guest" subject="下划线" date="D:20231028161644+08'00'" creationdate="D:20231028161644+08'00'" coords="87.52089999999953,374.9297444799999,169.31646199999977,374.9297444799999,87.52089999999953,354.4934949399999,169.31646199999977,354.4934949399999"><contents>.字符串数组</contents></underline><squiggly page="749" rect="80.017,498.432,360.673,713.545" color="#FF8D00" flags="print" name="4d373b60-b62e-2f31-a85c-be832148df56" title="Guest" subject="曲线" date="D:20231028161836+08'00'" creationdate="D:20231028161822+08'00'" coords="80.01672000000053,713.5447552,265.06979880000017,713.5447552,80.01672000000053,693.34840294,265.06979880000017,693.34840294,80.01672000000053,674.5614472,260.1170400000001,674.5614472,80.01672000000053,654.3650949400001,260.1170400000001,654.3650949400001,80.01672000000053,635.5781392,360.6730520000001,635.5781392,80.01672000000053,615.38178694,360.6730520000001,615.38178694,80.01672000000053,596.5948312,344.91427400000066,596.5948312,80.01672000000053,576.3984789399999,344.91427400000066,576.3984789399999,80.01672000000053,557.6115232,300.75967888000014,557.6115232,80.01672000000053,537.4151709399999,300.75967888000014,537.4151709399999,80.01672000000053,518.6282151999999,91.69322408000062,518.6282151999999,80.01672000000053,498.43186294,91.69322408000062,498.43186294"><contents>const char *mytalents[LIM] = {
"Adding numbers swiftly",
"Multiplying accurately", "Stashing data",
"Following instructions to the letter",
"Understanding the C language"
};</contents></squiggly><squiggly page="749" rect="80.017,303.515,318.019,479.645" color="#FF8D00" flags="print" name="203aaa1f-67da-371e-b1c1-99bd4395ac98" title="Guest" subject="曲线" date="D:20231028161844+08'00'" creationdate="D:20231028161844+08'00'" coords="80.01672000000053,479.6449071999999,313.09655080000084,479.6449071999999,80.01672000000053,459.44855493999995,313.09655080000084,459.44855493999995,80.01672000000053,440.6615991999999,287.8825059999999,440.6615991999999,80.01672000000053,420.46524693999993,287.8825059999999,420.46524693999993,80.01672000000053,401.6782911999999,305.89253800000006,401.6782911999999,80.01672000000053,381.4819389399999,305.89253800000006,381.4819389399999,80.01672000000053,362.69498319999985,318.01929288000065,362.69498319999985,80.01672000000053,342.4986309399999,318.01929288000065,342.4986309399999,80.01672000000053,323.71167519999983,91.69322408000062,323.71167519999983,80.01672000000053,303.5153229399999,91.69322408000062,303.5153229399999"><contents>char yourtalents[LIM][SLEN] = {
"Walking in a straight
line",
"Sleeping", "Watching television",
"Mailing letters", "Reading email"
};</contents></squiggly><squiggly page="745" rect="87.521,621.379,216.593,641.815" color="#FF8D00" flags="print" name="940057ec-806f-beff-52f2-46af9cda2e71" title="Guest" subject="曲线" date="D:20231028161901+08'00'" creationdate="D:20231028161901+08'00'" coords="87.52089999999998,641.8154684799999,216.5927959999999,641.8154684799999,87.52089999999998,621.37921894,216.5927959999999,621.37921894"><contents>.数组和指针的区别</contents></squiggly><squiggly page="679" rect="223.347,119.903,420.706,143.405" color="#FF8D00" flags="print" name="3e69d83a-b5a2-1f1f-bcb1-106329340fd5" title="Guest" subject="曲线" date="D:20231028161937+08'00'" creationdate="D:20231028161937+08'00'" coords="223.3465580000002,143.4048795519999,420.70649200000025,143.4048795519999,223.3465580000002,119.90319258099976,420.70649200000025,119.90319258099976"><contents>指针表示法和数组表示法</contents></squiggly><squiggly page="1132" rect="80.017,658.113,125.042,678.310" color="#4E7DE9" flags="print" name="36fbe120-0570-63e3-b63f-bc38da07a690" title="Guest" subject="曲线" date="D:20231113174917+08'00'" creationdate="D:20231113174917+08'00'" coords="80.01671999999999,678.3098422,125.04180000000001,678.3098422,80.01671999999999,658.11348994,125.04180000000001,658.11348994"><contents>运算符</contents></squiggly><squiggly page="1132" rect="299.889,502.180,419.956,522.377" color="#4E7DE9" flags="print" name="57146544-80d5-aa01-6850-aaac0ed5e5bd" title="Guest" subject="曲线" date="D:20231113174925+08'00'" creationdate="D:20231113174925+08'00'" coords="299.889194,522.3766102,419.956074,522.3766102,299.889194,502.18025793999993,419.956074,502.18025793999993"><contents>位运算符和位字段</contents></squiggly><squiggly page="1132" rect="125.042,463.197,262.887,483.393" color="#4E7DE9" flags="print" name="c5fe9e01-bb0f-6654-781f-f8c475f0eefe" title="Guest" subject="曲线" date="D:20231113174934+08'00'" creationdate="D:20231113174934+08'00'" coords="125.04180000000001,483.39330219999994,262.8871376953125,483.39330219999994,125.04180000000001,463.19694993999997,262.8871376953125,463.19694993999997"><contents>：_Alignas、_Alignof</contents></squiggly><underline page="1132" rect="50,330.684,545.276,369.727" color="#25D2D1" flags="print" name="ab85e6b0-ba9f-fba1-412a-e9398a5d8908" title="Guest" subject="下划线" date="D:20231113175140+08'00'" creationdate="D:20231113175140+08'00'" coords="500.2508,369.7269722199999,545.27588,369.7269722199999,500.2508,354.67341789999995,545.27588,354.67341789999995,50,345.73724421999987,305.14212,345.73724421999987,50,330.68368989999993,305.14212,330.68368989999993"><contents>许多压
缩和加密操作都是直接处理单独的位。</contents></underline><underline page="1132" rect="50,282.704,545.276,324.461" color="#25D2D1" flags="print" name="92e8794f-8b54-1713-2973-5c85200480c2" title="Guest" subject="下划线" date="D:20231113175144+08'00'" creationdate="D:20231113175144+08'00'" coords="80.01671999999999,324.46135419999985,545.27588,324.46135419999985,80.01671999999999,304.26500193999993,545.27588,304.26500193999993,50,297.75778821999984,455.22572,297.75778821999984,50,282.70423389999985,455.22572,282.70423389999985"><contents>C 在提供高级语言便利的同时，还能在为汇编语言所保留的级别上工
作，这使其成为编写设备驱动程序和嵌入式代码的首选语言。</contents></underline><underline page="1135" rect="50,686.781,536.271,728.538" color="#25D2D1" flags="print" name="693347bb-a2ec-720b-d0b5-b9f5e218d8f9" title="Guest" subject="下划线" date="D:20231113175316+08'00'" creationdate="D:20231113175316+08'00'" coords="80.01671999999996,728.5383352,536.2708640000001,728.5383352,80.01671999999996,708.34198294,536.2708640000001,708.34198294,50,701.83476922,245.10868000000005,701.83476922,50,686.7812149,245.10868000000005,686.7812149"><contents>这种方法的缺点是有两个0：+0和-0。这很容易混淆，而且用两个位组
合来表示一个值也有些浪费。</contents></underline><underline page="1135" rect="80.017,645.369,444.720,665.565" color="#25D2D1" flags="print" name="8dd27bc5-2f7c-09da-0aa2-e03ec5989a2b" title="Guest" subject="下划线" date="D:20231113175326+08'00'" creationdate="D:20231113175326+08'00'" coords="80.01671999999996,665.5652992,444.7198679999999,665.5652992,80.01671999999996,645.36894694,444.7198679999999,645.36894694"><contents>二进制补码（two’s-complement）方法避免了这个问题，</contents></underline><underline page="1139" rect="102.529,542.663,312.646,562.859" color="#25D2D1" flags="print" name="1ceee261-78b3-ecfc-42a4-6443aedfecb5" title="Guest" subject="下划线" date="D:20231113175821+08'00'" creationdate="D:20231113175821+08'00'" coords="102.52926,562.8592762,312.6463,562.8592762,102.52926,542.6629239399999,312.6463,542.6629239399999"><contents>按位逻辑运算符都用于整型数据</contents></underline><underline page="1139" rect="91.273,431.710,248.110,452.147" color="#25D2D1" flags="print" name="917a2751-eb78-9146-11f4-8bd63a87a58a" title="Guest" subject="下划线" date="D:20231113175858+08'00'" creationdate="D:20231113175858+08'00'" coords="91.27299,452.1466814799999,248.110352,452.1466814799999,91.27299,431.7104319399999,248.110352,431.7104319399999"><contents>二进制反码或按位取反</contents></underline><underline page="1139" rect="50,206.237,545.276,271.984" color="#25D2D1" flags="print" name="24c877d2-9550-8987-33f7-11529f7ad7d8" title="Guest" subject="下划线" date="D:20231113180007+08'00'" creationdate="D:20231113180007+08'00'" coords="395.19228000000004,271.98382419999984,533.68942608,271.98382419999984,395.19228000000004,251.78747193999993,533.68942608,251.78747193999993,50,247.99409619999983,545.27588,247.99409619999983,50,227.79774393999992,545.27588,227.79774393999992,50,221.29053021999982,275.1254,221.29053021999982,50,206.23697589999983,275.1254,206.23697589999983"><contents>该运算符不会改变val
的值，就像3 * val不会改变val的值一样， val仍然是2。但是，该运算符确实
创建了一个可以使用或赋值的新值</contents></underline><squiggly page="1139" rect="259.367,581.705,384.686,605.207" color="#4E7DE9" flags="print" name="bf2286ae-872c-63db-3f40-852945b7bbf6" title="Guest" subject="曲线" date="D:20231114105625+08'00'" creationdate="D:20231114105625+08'00'" coords="259.366622,605.2071435519999,384.68642800000003,605.2071435519999,259.366622,581.7054565809999,384.68642800000003,581.7054565809999"><contents>按位逻辑运算符</contents></squiggly><squiggly page="1140" rect="87.521,732.332,166.810,752.768" color="#4E7DE9" flags="print" name="1667c978-5a91-8513-fd46-d69fea024856" title="Guest" subject="曲线" date="D:20231114110448+08'00'" creationdate="D:20231114110448+08'00'" coords="87.52089999999998,752.76796048,166.81006588000002,752.76796048,87.52089999999998,732.33171094,166.81006588000002,732.33171094"><contents>.按位与：&amp;</contents></squiggly><squiggly page="1141" rect="331.407,281.834,366.676,305.336" color="#4E7DE9" flags="print" name="21cfab58-2b19-7358-9233-f05f0d2b189a" title="Guest" subject="曲线" date="D:20231114110855+08'00'" creationdate="D:20231114110855+08'00'" coords="331.4067500000001,305.3355435519999,366.67639600000007,305.3355435519999,331.4067500000001,281.83385658099985,366.67639600000007,281.83385658099985"><contents>掩码</contents></squiggly><underline page="1141" rect="50,219.551,515.259,263.737" color="#25D2D1" flags="print" name="8229efaa-fcf0-216a-de86-ead45ad93675" title="Guest" subject="下划线" date="D:20231114112422+08'00'" creationdate="D:20231114112422+08'00'" coords="380.18391999999994,263.7373551999998,515.2591600000001,263.7373551999998,380.18391999999994,243.54100293999988,515.2591600000001,243.54100293999988,50,239.74762719999978,230.10032,239.74762719999978,50,219.55127493999987,230.10032,219.55127493999987"><contents>指的是一些设置为开
（1）或关（0）的位组合。</contents></underline><squiggly page="1194" rect="50,634.124,533.269,678.310" color="#4E7DE9" flags="print" name="34040f7c-bb0e-6d35-b329-b266a1d790b1" title="Guest" subject="曲线" date="D:20231114115122+08'00'" creationdate="D:20231114115122+08'00'" coords="80.01671999999999,678.3098422,533.269192,678.3098422,80.01671999999999,658.11348994,533.269192,658.11348994,50,654.3201142,241.26653984,654.3201142,50,634.12376194,241.26653984,634.12376194"><contents>预处理指令：#define、#include、#ifdef、#else、#endif、#ifndef、#if、
#elif、#line、#error、#pragma</contents></squiggly><squiggly page="1194" rect="80.017,226.298,479.990,246.495" color="#4E7DE9" flags="print" name="95e03205-cc86-1f9a-3938-b80ea9f28026" title="Guest" subject="曲线" date="D:20231114144003+08'00'" creationdate="D:20231114144003+08'00'" coords="80.01671999999999,246.4947381999998,479.98951400000004,246.4947381999998,80.01671999999999,226.2983859399999,479.98951400000004,226.2983859399999"><contents>C预处理器在程序执行之前查看程序（故称之为预处理器）。</contents></squiggly><squiggly page="1195" rect="245.109,698.026,305.142,713.080" color="#4E7DE9" flags="print" name="24bbb275-5d83-33f0-71da-efcbcd888633" title="Guest" subject="曲线" date="D:20231114144030+08'00'" creationdate="D:20231114144030+08'00'" coords="245.10868000000002,713.07995422,305.14212,713.07995422,245.10868000000002,698.0263999,305.14212,698.0263999"><contents>源字符集</contents></squiggly><squiggly page="1195" rect="125.042,62.299,425.209,77.352" color="#4E7DE9" flags="print" name="6edf186e-747f-430e-fd37-5247b1a9c41d" title="Guest" subject="曲线" date="D:20231114144118+08'00'" creationdate="D:20231114144118+08'00'" coords="125.04180000000001,77.35216221999974,425.209,77.35216221999974,125.04180000000001,62.29860789999975,425.209,62.29860789999975"><contents>实现可以用一个空格替换所有的空白字符序列</contents></squiggly><squiggly page="1197" rect="50,491.115,545.276,530.158" color="#4E7DE9" flags="print" name="6b459b15-460e-a9b2-21fa-8a1f1d567f9b" title="Guest" subject="曲线" date="D:20231114144247+08'00'" creationdate="D:20231114144247+08'00'" coords="335.15884,530.1582782199999,545.27588,530.1582782199999,335.15884,515.1047239,545.27588,515.1047239,50,506.16855021999993,245.10868000000002,506.16855021999993,50,491.11499589999994,245.10868000000002,491.11499589999994"><contents>在预处理开始前，编译器会把多
行物理行处理为一行逻辑行。</contents></squiggly><squiggly page="1198" rect="95.025,459.449,341.913,479.645" color="#4E7DE9" flags="print" name="1d36fbf1-8b76-cbca-0894-e8906a0b1c11" title="Guest" subject="曲线" date="D:20231114144517+08'00'" creationdate="D:20231114144517+08'00'" coords="95.02508,479.6449071999999,341.912602,479.6449071999999,95.02508,459.44855493999995,341.912602,459.44855493999995"><contents>行#define（逻辑行）都由3部分组成。</contents></squiggly><squiggly page="1198" rect="50,339.500,545.186,455.655" color="#4E7DE9" flags="print" name="d7c922d5-60d2-ab86-e3d4-184b39653844" title="Guest" subject="曲线" date="D:20231114144540+08'00'" creationdate="D:20231114144540+08'00'" coords="87.52089999999998,455.6551791999999,537.7717,455.6551791999999,87.52089999999998,435.45882693999994,537.7717,435.45882693999994,50,431.6654511999999,189.48769784,431.6654511999999,50,411.4690989399999,189.48769784,411.4690989399999,224.09697600000004,431.6654511999999,300.89475412,431.6654511999999,224.09697600000004,411.4690989399999,300.89475412,411.4690989399999,335.15884000000005,431.6654511999999,545.1858298400001,431.6654511999999,335.15884000000005,411.4690989399999,545.1858298400001,411.4690989399999,50,407.6757231999999,531.768356,407.6757231999999,50,387.4793709399999,531.768356,387.4793709399999,50,383.68599519999987,522.76334,383.68599519999987,50,363.4896429399999,522.76334,363.4896429399999,50,359.69626719999985,80.01671999999996,359.69626719999985,50,339.4999149399999,80.01671999999996,339.4999149399999"><contents>是选定的缩写，也称为宏。有些宏代表值（如本例），这些宏被称为
类对象宏（object-like macro）。C 语言还有类函数宏（function-like
macro），稍后讨论。宏的名称中不允许有空格，而且必须遵循C变量的命
名规则：只能使用字符、数字和下划线（_）字符，而且首字符不能是数
字。</contents></squiggly><underline page="1198" rect="312.646,339.500,432.713,359.696" color="#25D2D1" flags="print" name="79aca356-9f46-98e1-27bc-d56c95f1f97b" title="Guest" subject="下划线" date="D:20231114144547+08'00'" creationdate="D:20231114144547+08'00'" coords="312.6463,359.69626719999985,432.71317999999997,359.69626719999985,312.6463,339.4999149399999,432.71317999999997,339.4999149399999"><contents>替换列表或替换体</contents></underline><square page="1198" rect="121.980,66.720,474.150,222.150" color="#00CC63" flags="print" name="a4fb2d05-25c9-e6f9-f517-cd04f7fb2548" title="Guest" subject="矩形" date="D:20231114145001+08'00'" creationdate="D:20231114144959+08'00'"/><squiggly page="1199" rect="65.008,212.234,125.042,227.288" color="#4E7DE9" flags="print" name="3fcc2b32-0283-e081-9f5b-7161a7d2928f" title="Guest" subject="曲线" date="D:20231114145257+08'00'" creationdate="D:20231114145257+08'00'" coords="65.00835999999993,227.28796221999983,125.04179999999997,227.28796221999983,65.00835999999993,212.23440789999984,125.04179999999997,212.23440789999984"><contents>明示常量</contents></squiggly><square page="1205" rect="144.930,483.160,451.850,628.100" color="#00CC63" flags="print" name="8d7d9a38-23b6-5133-c77f-86467d8953f0" title="Guest" subject="矩形" date="D:20231114151242+08'00'" creationdate="D:20231114151232+08'00'"/><squiggly page="1215" rect="50,476.121,545.276,587.134" color="#4E7DE9" flags="print" name="575f55f2-b7b6-95f7-0cff-f59a370a231e" title="Guest" subject="曲线" date="D:20231114152152+08'00'" creationdate="D:20231114152152+08'00'" coords="80.01671999999999,587.13388222,545.27588,587.13388222,80.01671999999999,572.0803278999999,545.27588,572.0803278999999,50,565.8579921999999,545.27588,565.8579921999999,50,545.66163994,545.27588,545.66163994,50,541.8682641999999,545.27588,541.8682641999999,50,521.67191194,545.27588,521.67191194,50,515.16469822,545.27588,515.16469822,50,500.11114389999995,545.27588,500.11114389999995,50,491.1749702199999,140.05016,491.1749702199999,50,476.12141589999993,140.05016,476.12141589999993"><contents>宏和函数的选择实际上是时间和空间的权衡。宏生成内联代码，即在程
序中生成语句。如果调用20次宏，即在程序中插入20行代码。如果调用函数
20次，程序中只有一份函数语句的副本，所以节省了空间。然而另一方面，
程序的控制必须跳转至函数内，随后再返回主调程序，这显然比内联代码花
费更多的时间</contents></squiggly><underline page="1219" rect="50,504.429,545.276,545.902" color="#25D2D1" flags="print" name="acd514dc-1eb0-c444-afed-771aad922fe0" title="Guest" subject="下划线" date="D:20231114154153+08'00'" creationdate="D:20231114154153+08'00'" coords="500.2508,545.9015372199999,545.2758799999999,545.9015372199999,500.2508,530.8479829,545.2758799999999,530.8479829,50,524.6256472,511.5070699999999,524.6256472,50,504.42929494,511.5070699999999,504.42929494"><contents>通常，
应该用#ifndef和#define防止多重包含头文件。我们稍后介绍这些内容。</contents></underline><underline page="1222" rect="80.017,332.933,440.217,347.986" color="#25D2D1" flags="print" name="d3db18f5-06fc-02dc-05a0-fd383e481f07" title="Guest" subject="下划线" date="D:20231114154951+08'00'" creationdate="D:20231114154951+08'00'" coords="80.01671999999962,347.98628121999985,440.21735999999964,347.98628121999985,80.01671999999962,332.9327268999999,440.21735999999964,332.9327268999999"><contents>浏览任何一个标准头文件都可以了解头文件的基本信息</contents></underline><underline page="1222" rect="80.017,54.622,170.067,74.818" color="#25D2D1" flags="print" name="424e75de-df61-f94a-b46d-af742b3a0b32" title="Guest" subject="下划线" date="D:20231114155007+08'00'" creationdate="D:20231114155007+08'00'" coords="80.01671999999962,74.81824719999975,170.06687999999986,74.81824719999975,80.01671999999962,54.62189493999972,170.06687999999986,54.62189493999972"><contents>结构模版定义</contents></underline><underline page="1223" rect="80.017,732.332,140.050,752.528" color="#25D2D1" flags="print" name="b3888e81-165a-0edf-c61b-371757ecef8f" title="Guest" subject="下划线" date="D:20231114155012+08'00'" creationdate="D:20231114155012+08'00'" coords="80.01672000000008,752.5280632,140.05016000000023,752.5280632,80.01672000000008,732.33171094,140.05016000000023,732.33171094"><contents>类型定义</contents></underline><underline page="1224" rect="50,647.618,544.525,715.794" color="#25D2D1" flags="print" name="cd175f29-4287-e83c-2b91-9c7cc839ff91" title="Guest" subject="下划线" date="D:20231114155141+08'00'" creationdate="D:20231114155141+08'00'" coords="440.21736000000004,715.7937922,544.5254620000001,715.7937922,440.21736000000004,695.59743994,544.5254620000001,695.59743994,50,691.8040642,531.017938,691.8040642,50,671.60771194,531.017938,671.60771194,50,667.8143362,488.99453,667.8143362,50,647.6179839399999,488.99453,647.6179839399999"><contents>修改#define的值
即可生成可移植的代码。#undef指令取消之前的#define定义。#if、#ifdef、
#ifndef、#else、#elif和#endif指令用于指定什么情况下编写哪些代码</contents></underline><underline page="1224" rect="50,602.067,543.775,667.814" color="#25D2D1" flags="print" name="b47a2beb-0b99-5191-2738-e771cd98f8d2" title="Guest" subject="下划线" date="D:20231114155149+08'00'" creationdate="D:20231114155149+08'00'" coords="488.99453,667.8143362,533.92955984,667.8143362,488.99453,647.6179839399999,533.92955984,647.6179839399999,50,643.8246082000001,543.775044,643.8246082000001,50,623.6282559399999,543.775044,623.6282559399999,50,617.1210422199999,200.08360000000002,617.1210422199999,50,602.0674879,200.08360000000002,602.0674879"><contents>。#line
指令用于重置行和文件信息，#error指令用于给出错误消息，#pragma指令用
于向编译器发出指令。</contents></underline><underline page="1230" rect="50,527.849,522.013,569.606" color="#25D2D1" flags="print" name="eaa05385-44fb-27fa-3da5-83b65fc98161" title="Guest" subject="下划线" date="D:20231114194307+08'00'" creationdate="D:20231114194307+08'00'" coords="215.0919600000002,569.6063872,522.0129220000003,569.6063872,215.0919600000002,549.41003494,522.0129220000003,549.41003494,50,542.90282122,485.24244,542.90282122,50,527.8492669,485.24244,527.8492669"><contents>C标准头文件使用#ifndef技巧避免重复包含。但
是，这存在一个问题：如何确保待测试的标识符没有在别处定义。</contents></underline><squiggly page="1229" rect="152.057,252.537,362.174,272.734" color="#4E7DE9" flags="print" name="42464a7f-7856-7054-a044-f3976061bdeb" title="Guest" subject="曲线" date="D:20231114195151+08'00'" creationdate="D:20231114195151+08'00'" coords="152.05684799999972,272.73350319999986,362.1738879999998,272.73350319999986,152.05684799999972,252.53715093999983,362.1738879999998,252.53715093999983"><contents>通常用于防止多次包含一个文件</contents></squiggly><underline page="1230" rect="155.059,734.761,245.109,749.814" color="#25D2D1" flags="print" name="6196ea3a-9f6d-eac1-8e0d-75919848b44f" title="Guest" subject="下划线" date="D:20231114195326+08'00'" creationdate="D:20231114195326+08'00'" coords="155.05852000000004,749.81422522,245.10868000000028,749.81422522,155.05852000000004,734.7606709,245.10868000000028,734.7606709"><contents>被包含了多次</contents></underline><square page="1234" rect="54.260,286.300,542.590,439.010" color="#00CC63" flags="print" name="ec6d9818-4165-dc77-cd0e-44bdb52a78d7" title="Guest" subject="矩形" date="D:20231114201030+08'00'" creationdate="D:20231114201028+08'00'"/><underline page="1234" rect="233.348,248.039,410.201,268.235" color="#25D2D1" flags="print" name="f5e00719-1fee-f704-a27c-0bd21de1d1cc" title="Guest" subject="下划线" date="D:20231114201233+08'00'" creationdate="D:20231114201233+08'00'" coords="233.34812910399978,268.2354291999999,410.20064,268.2354291999999,233.34812910399978,248.03907693999986,410.20064,248.03907693999986"><contents>_ _func_ _的预定义标识符</contents></underline><underline page="1238" rect="50,228.547,545.276,272.734" color="#25D2D1" flags="print" name="04c31b54-6185-9adf-894a-034ab87b9dd4" title="Guest" subject="下划线" date="D:20231114220944+08'00'" creationdate="D:20231114220944+08'00'" coords="170.0668800000003,272.73350319999986,545.2758800000001,272.73350319999986,170.0668800000003,252.53715093999983,545.2758800000001,252.53715093999983,50,248.74377519999985,455.22572000000036,248.74377519999985,50,228.54742293999993,455.22572000000036,228.54742293999993"><contents>，泛型编程（generic
programming）指那些没有特定类
型，但是一旦指定一种类型，就可以转换成指定类型的代码。</contents></underline><squiggly page="1319" rect="50,599.639,545.276,641.111" color="#4E7DE9" flags="print" name="df4a0992-7219-8257-c615-a1f6a3a75f36" title="Guest" subject="曲线" date="D:20231115163210+08'00'" creationdate="D:20231115163210+08'00'" coords="500.2508,641.11077022,545.27588,641.11077022,500.2508,626.0572159,545.27588,626.0572159,50,619.8348802,410.20064,619.8348802,50,599.63852794,410.20064,599.63852794"><contents>我们使
用 C语言的功能设计了一种符合程序要求的新数据类型</contents></squiggly><underline page="1319" rect="239.856,386.730,344.914,406.926" color="#25D2D1" flags="print" name="a7d74b31-6e0a-e837-ebc5-2f097d65175c" title="Guest" subject="下划线" date="D:20231115163319+08'00'" creationdate="D:20231115163319+08'00'" coords="239.85575400000002,406.92604419999986,344.91427400000003,406.92604419999986,239.85575400000002,386.7296919399999,344.91427400000003,386.7296919399999"><contents>抽象的整数概念</contents></underline><underline page="1319" rect="50,314.761,531.018,358.947" color="#25D2D1" flags="print" name="ba6878d5-deaf-3b81-2b1d-25b374244376" title="Guest" subject="下划线" date="D:20231115163358+08'00'" creationdate="D:20231115163358+08'00'" coords="425.959418,358.9465881999999,531.017938,358.9465881999999,425.959418,338.7502359399999,531.017938,338.7502359399999,50,334.9568601999999,185.07524,334.9568601999999,50,314.7605079399999,185.07524,314.7605079399999"><contents>认为数学家提供
了整数的抽象概念，</contents></underline><underline page="1319" rect="170.067,536.665,380.184,556.862" color="#25D2D1" flags="print" name="74eabfb6-e565-303d-da0c-0c729711f519" title="Guest" subject="下划线" date="D:20231115163625+08'00'" creationdate="D:20231115163625+08'00'" coords="170.06688,556.8618442,380.18392,556.8618442,170.06688,536.66549194,380.18392,536.66549194"><contents>类型特指两类信息：属性和操作</contents></underline><squiggly page="1319" rect="50,488.686,545.276,556.862" color="#4E7DE9" flags="print" name="a222f392-e7cd-7d83-045c-cbd4b2038384" title="Guest" subject="曲线" date="D:20231115163637+08'00'" creationdate="D:20231115163637+08'00'" coords="395.19228,556.8618442,545.27588,556.8618442,395.19228,536.66549194,545.27588,536.66549194,50,532.8721161999999,545.27588,532.8721161999999,50,512.67576394,545.27588,512.67576394,50,508.8823882,545.27588,508.8823882,50,488.68603593999995,545.27588,488.68603593999995"><contents>例如，int 类型的属性
是它代表一个整数值，因此它共享整数的属性。允许对int类型进行算术操作
是：改变int类型值的符号、两个int类型值相加、相减、相乘、相除、求模。</contents></squiggly><underline page="1319" rect="80.017,182.247,275.125,197.301" color="#25D2D1" flags="print" name="5c812b45-76c6-9f18-3ab3-bd34ef1baee7" title="Guest" subject="下划线" date="D:20231115164003+08'00'" creationdate="D:20231115164003+08'00'" coords="80.01671999999999,197.3008022199998,275.1254,197.3008022199998,80.01671999999999,182.24724789999982,275.1254,182.24724789999982"><contents>假设要定义一个新的数据类型</contents></underline><underline page="1319" rect="50,86.288,545.276,125.332" color="#25D2D1" flags="print" name="e02761b9-2e5b-6fca-074e-5f85169a550f" title="Guest" subject="下划线" date="D:20231115164047+08'00'" creationdate="D:20231115164047+08'00'" coords="200.08360000000002,125.33161821999977,545.27588,125.33161821999977,200.08360000000002,110.27806389999989,545.27588,110.27806389999989,50,101.34189021999975,185.07524,101.34189021999975,50,86.28833589999988,185.07524,86.28833589999988"><contents>尽管如此，该程序并未清楚地表明正在创建一个新类
型。我们应该怎么做</contents></underline><underline page="1320" rect="91.273,708.342,331.407,728.538" color="#25D2D1" flags="print" name="901bab50-a8b8-7c5e-988e-fa2e837f9959" title="Guest" subject="下划线" date="D:20231115164106+08'00'" creationdate="D:20231115164106+08'00'" coords="91.27298999999994,728.5383352,331.40675,728.5383352,91.27298999999994,708.34198294,331.40675,708.34198294"><contents>提供类型属性和相关操作的抽象描述</contents></underline><squiggly page="1320" rect="50,686.781,541.524,728.538" color="#4E7DE9" flags="print" name="554d5820-b22e-a34a-fc88-a7b0b026c6ad" title="Guest" subject="曲线" date="D:20231115164339+08'00'" creationdate="D:20231115164339+08'00'" coords="346.41511,728.5383352,541.52379,728.5383352,346.41511,708.34198294,541.52379,708.34198294,50,701.83476922,275.1254,701.83476922,50,686.7812149,275.1254,686.7812149"><contents>这些描述既不能依赖特定的实
现，也不能依赖特定的编程语言。</contents></squiggly><squiggly page="1320" rect="91.273,510.427,211.340,530.623" color="#4E7DE9" flags="print" name="f22e53f7-a95d-070b-1c94-fc3adacd9a35" title="Guest" subject="曲线" date="D:20231115164437+08'00'" creationdate="D:20231115164437+08'00'" coords="91.27298999999994,530.6230791999999,211.33987000000002,530.6230791999999,91.27298999999994,510.42672694,211.33987000000002,510.42672694"><contents>编写代码实现接口</contents></squiggly><squiggly page="1320" rect="91.273,621.379,305.142,641.576" color="#4E7DE9" flags="print" name="1c6a6a70-b26b-dfde-43bd-f3f61a206b32" title="Guest" subject="曲线" date="D:20231115164442+08'00'" creationdate="D:20231115164442+08'00'" coords="91.27298999999994,641.5755712,305.14212,641.5755712,91.27298999999994,621.37921894,305.14212,621.37921894"><contents>开发一个实现 ADT 的编程接口</contents></squiggly><squiggly page="1320" rect="410.201,296.948,440.217,312.002" color="#4E7DE9" flags="print" name="42445a5f-e8f0-9615-d3f1-4ecbf611a9df" title="Guest" subject="曲线" date="D:20231115164946+08'00'" creationdate="D:20231115164946+08'00'" coords="410.20064,312.0016892199999,440.21736,312.0016892199999,410.20064,296.9481348999999,440.21736,296.9481348999999"><contents>属性</contents></squiggly><underline page="1320" rect="50,246.540,545.276,288.012" color="#25D2D1" flags="print" name="9274e7a5-944a-af03-b2ad-aa465e671c1c" title="Guest" subject="下划线" date="D:20231115164959+08'00'" creationdate="D:20231115164959+08'00'" coords="275.1254,288.0119612199999,545.27588,288.0119612199999,275.1254,272.9584068999999,545.27588,272.9584068999999,50,266.73607119999986,410.20064,266.73607119999986,50,246.53971893999983,410.20064,246.53971893999983"><contents>链表能储存多个项，而且这些项以某种方
式排列，这样才能描述链表的第1项、第2项或最后一项</contents></underline><squiggly page="1320" rect="125.042,224.979,155.059,240.033" color="#4E7DE9" flags="print" name="3479cb8e-e0b9-182e-8e96-7435e4bfe0ae" title="Guest" subject="曲线" date="D:20231115165004+08'00'" creationdate="D:20231115165004+08'00'" coords="125.04179999999997,240.03250521999985,155.05852000000004,240.03250521999985,125.04179999999997,224.97895089999986,155.05852000000004,224.97895089999986"><contents>操作</contents></squiggly><underline page="1321" rect="170.067,413.898,200.084,428.952" color="#25D2D1" flags="print" name="aec84983-00e6-fcab-4066-6f1c0d2f3792" title="Guest" subject="下划线" date="D:20231115172443+08'00'" creationdate="D:20231115172443+08'00'" coords="170.06688000000008,428.9516132199999,200.08359999999993,428.9516132199999,170.06688000000008,413.8980588999999,200.08359999999993,413.8980588999999"><contents>对象</contents></underline><underline page="1321" rect="260.117,326.935,515.259,341.989" color="#25D2D1" flags="print" name="cfe9d2ec-a851-dd2a-ac0c-37cb7ae6a353" title="Guest" subject="下划线" date="D:20231115172530+08'00'" creationdate="D:20231115172530+08'00'" coords="260.1170400000001,341.98884921999985,515.2591600000001,341.98884921999985,260.1170400000001,326.9352948999999,515.2591600000001,326.9352948999999"><contents>采用一种简化的链表作为抽象数据类型</contents></underline><underline page="1322" rect="50,549.410,545.276,593.596" color="#25D2D1" flags="print" name="6f6ee048-3f40-ccd1-6e76-39ecd8accb04" title="Guest" subject="下划线" date="D:20231115172727+08'00'" creationdate="D:20231115172727+08'00'" coords="372.67974000000004,593.5961152,545.2758800000001,593.5961152,372.67974000000004,573.39976294,545.2758800000001,573.39976294,50,569.6063872,245.10868000000005,569.6063872,50,549.41003494,245.10868000000005,549.41003494"><contents>描述如何表示数据，第2部
分是描述实现ADT操作的函数</contents></underline><underline page="1322" rect="185.075,525.420,440.217,545.617" color="#25D2D1" flags="print" name="d9b00195-2fa0-b65c-5157-fcf7b1343410" title="Guest" subject="下划线" date="D:20231115172833+08'00'" creationdate="D:20231115172833+08'00'" coords="185.07524000000012,545.6166592,440.2173600000001,545.6166592,185.07524000000012,525.4203069399999,440.2173600000001,525.4203069399999"><contents>接口设计应尽量与ADT的描述保持一致</contents></underline><underline page="1324" rect="80.017,669.359,467.983,689.555" color="#25D2D1" flags="print" name="396bf41b-b309-d895-6695-00c6b6060367" title="Guest" subject="下划线" date="D:20231115173727+08'00'" creationdate="D:20231115173727+08'00'" coords="80.01671999999962,689.5550272,467.98282599999993,689.5550272,80.01671999999962,669.35867494,467.98282599999993,669.35867494"><contents>movies代表的确切数据应该是接口层次不可见的实现细节。</contents></underline><underline page="1324" rect="80.017,387.479,492.747,407.676" color="#25D2D1" flags="print" name="01d1a3ed-bfd2-afa6-07af-dbb542538edb" title="Guest" subject="下划线" date="D:20231115173816+08'00'" creationdate="D:20231115173816+08'00'" coords="80.01671999999962,407.6757231999999,492.7466199999999,407.6757231999999,80.01671999999962,387.4793709399999,492.7466199999999,387.4793709399999"><contents>使用List的人都不用担心这些细节，只要能使用下面的代码就行</contents></underline><underline page="1324" rect="50,285.523,540.773,329.709" color="#25D2D1" flags="print" name="5ee9e615-6c19-8923-82cd-ae7b66868fd4" title="Guest" subject="下划线" date="D:20231115173825+08'00'" creationdate="D:20231115173825+08'00'" coords="80.01671999999962,329.70910719999983,540.7733719999997,329.70910719999983,80.01671999999962,309.5127549399999,540.7733719999997,309.5127549399999,50,305.7193791999998,252.61285999999973,305.7193791999998,50,285.5230269399999,252.61285999999973,285.5230269399999"><contents>使用该类型的程序员只需知道用InitializeList()函数来初始化链表，不必
了解List类型变量的实现细节。</contents></underline><underline page="1324" rect="80.017,224.979,440.217,240.033" color="#25D2D1" flags="print" name="7b837773-6b29-25e4-ad73-e5ffed4c0b9d" title="Guest" subject="下划线" date="D:20231115173856+08'00'" creationdate="D:20231115173856+08'00'" coords="80.01671999999962,240.03250521999985,440.21735999999964,240.03250521999985,80.01671999999962,224.97895089999986,440.21735999999964,224.97895089999986"><contents>为了指导用户使用，可以在函数原型前面提供以下注释</contents></underline><squiggly page="1325" rect="143.052,186.565,281.129,207.002" color="#E2A1E6" flags="print" name="c759b871-d311-c218-3896-050fa210d422" title="Guest" subject="曲线" date="D:20231115174026+08'00'" creationdate="D:20231115174022+08'00'" coords="143.0518320000001,207.00164847999986,281.1287440000001,207.00164847999986,143.0518320000001,186.5653989399999,281.1287440000001,186.5653989399999"><contents>17.3 list.h接口头文件</contents></squiggly><underline page="1329" rect="80.017,156.008,545.276,171.062" color="#25D2D1" flags="print" name="eef5feeb-a567-0acc-6a06-c459c129d63f" title="Guest" subject="下划线" date="D:20231115174048+08'00'" creationdate="D:20231115174048+08'00'" coords="80.01671999999962,171.06203721999987,545.2758800000001,171.06203721999987,80.01671999999962,156.00848289999988,545.2758800000001,156.00848289999988"><contents>我们的目标是，使用这个接口编写程序，但是不必知道具体的实现细节</contents></underline><underline page="1324" rect="170.067,144.583,293.886,164.780" color="#25D2D1" flags="print" name="6d98c658-433b-ed6e-1562-58194c58cc6a" title="Guest" subject="下划线" date="D:20231115195655+08'00'" creationdate="D:20231115195655+08'00'" coords="170.06687999999986,164.7797271999998,293.88584999999966,164.7797271999998,170.06687999999986,144.58337493999989,293.88584999999966,144.58337493999989"><contents>plist指向一个链表*</contents></underline><underline page="1325" rect="50,747.325,543.775,791.511" color="#25D2D1" flags="print" name="f09f16c6-dc24-3c32-2293-a64af10f276b" title="Guest" subject="下划线" date="D:20231115195816+08'00'" creationdate="D:20231115195816+08'00'" coords="230.10032,791.5113712,543.775044,791.5113712,230.10032,771.3150189400001,543.775044,771.3150189400001,50,767.5216432,185.07524000000012,767.5216432,50,747.3252909400001,185.07524000000012,747.3252909400001"><contents>注释中的“前提条件”（precondition）是调用该函
数前应具备的条件。</contents></underline><underline page="1325" rect="50,701.775,544.525,767.522" color="#25D2D1" flags="print" name="94a59089-111d-d34c-48ab-3b7ab620bde5" title="Guest" subject="下划线" date="D:20231115195829+08'00'" creationdate="D:20231115195829+08'00'" coords="410.20064,767.5216432,544.5254620000001,767.5216432,410.20064,747.3252909400001,544.5254620000001,747.3252909400001,50,743.5319152,534.7700280000004,743.5319152,50,723.33556294,534.7700280000004,723.33556294,50,716.8283492200001,305.14212,716.8283492200001,50,701.7747949,305.14212,701.7747949"><contents>第2，注释中的“后置
条件”（postcondition）是执行完该函数后的情况。第3，该函数的参数是一
个指向链表的指针，而不是一个链表。</contents></underline><underline page="69" rect="200.084,631.305,305.142,646.359" color="#E44234" flags="print" name="508c3659-58fa-bd79-472b-6dd934c97fd9" title="Guest" subject="下划线" date="D:20231224085434+08'00'" creationdate="D:20231224085434+08'00'" coords="200.08360000000005,646.35852322,305.14212,646.35852322,200.08360000000005,631.3049689,305.14212,631.3049689"><contents>提供键盘输入和</contents></underline></annots><pages><defmtx matrix="1,0,0,-1,0,841.8898"/></pages></xfdf>